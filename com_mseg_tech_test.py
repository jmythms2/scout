#!/usr/bin/env python3

# Import code to be tested
import com_mseg_tech as cmt

# Import packages
import unittest
import numpy as np


class CommonUnitTest(unittest.TestCase):
    """ Top level test class that contains common variables with data so
    that all tests are easily set up to use a consistent body of data """

    # Define an array taking the form of the EIA cost, performance, and
    # lifetime data, but with a reduced set of columns incorporating
    # only the data required as final outputs and with rows modified to
    # represent the full range of data in the EIA data without having
    # an excessive number of rows
    tech_data = np.array([
        (1, 1, 4, 1, 1, 0.0150, 3.10, 67.78, 1.47, 15, 2003, 2009,
         'rooftop_ASHP-heat 2003 installed base'),
        (1, 1, 5, 1, 1, 0.1578, 3.10, 67.78, 1.47, 15, 2003, 2009,
         'rooftop_ASHP-heat 2003 installed base'),
        (1, 1, 6, 1, 1, 0.1002, 3.10, 67.78, 1.47, 15, 2003, 2009,
         'rooftop_ASHP-heat 2003 installed base'),
        (1, 2, 4, 1, 1, 0, 3.25, 81.39, 1.47, 15, 2003, 2009,
         'rooftop_ASHP-heat 2012 installed base'),
        (1, 2, 5, 1, 1, 0, 3.25, 81.39, 1.47, 15, 2003, 2009,
         'rooftop_ASHP-heat 2012 installed base'),
        (1, 2, 6, 1, 1, 0, 3.25, 81.39, 1.47, 15, 2003, 2009,
         'rooftop_ASHP-heat 2012 installed base'),
        (1, 3, 4, 1, 1, 0, 3.30, 81.39, 1.47, 15, 2003, 2052,
         'rooftop_ASHP-heat 2013 current standard/ typical'),
        (1, 3, 5, 1, 1, 0, 3.30, 81.39, 1.47, 15, 2003, 2052,
         'rooftop_ASHP-heat 2013 current standard/ typical'),
        (1, 3, 6, 1, 1, 0, 3.30, 81.39, 1.47, 15, 2003, 2052,
         'rooftop_ASHP-heat 2013 current standard/ typical'),
        (1, 4, 4, 1, 1, 0, 3.35, 83.61, 1.47, 15, 2003, 2052,
         'rooftop_ASHP-heat 2013 ENERGY STAR'),
        (1, 4, 5, 1, 1, 0, 3.35, 83.61, 1.47, 15, 2003, 2052,
         'rooftop_ASHP-heat 2013 ENERGY STAR'),
        (1, 4, 6, 1, 1, 0, 3.35, 83.61, 1.47, 15, 2003, 2052,
         'rooftop_ASHP-heat 2013 ENERGY STAR'),
        (1, 5, 4, 1, 1, 0, 3.40, 102.78, 1.47, 15, 2003, 2052,
         'rooftop_ASHP-heat 2013 high'),
        (1, 5, 5, 1, 1, 0, 3.40, 102.78, 1.47, 15, 2003, 2052,
         'rooftop_ASHP-heat 2013 high'),
        (1, 5, 6, 1, 1, 0, 3.40, 102.78, 1.47, 15, 2003, 2052,
         'rooftop_ASHP-heat 2013 high'),
        (1, 6, 4, 1, 1, 0, 3.30, 81.39, 1.47, 15, 2020, 2052,
         'rooftop_ASHP-heat 2020 typical'),
        (1, 6, 5, 1, 1, 0, 3.30, 81.39, 1.47, 15, 2020, 2052,
         'rooftop_ASHP-heat 2020 typical'),
        (1, 6, 6, 1, 1, 0, 3.30, 81.39, 1.47, 15, 2020, 2052,
         'rooftop_ASHP-heat 2020 typical'),
        (1, 7, 4, 1, 1, 0, 3.40, 102.78, 1.47, 15, 2020, 2052,
         'rooftop_ASHP-heat 2020 high'),
        (1, 7, 5, 1, 1, 0, 3.40, 102.78, 1.47, 15, 2020, 2052,
         'rooftop_ASHP-heat 2020 high'),
        (1, 7, 6, 1, 1, 0, 3.40, 102.78, 1.47, 15, 2020, 2052,
         'rooftop_ASHP-heat 2020 high'),
        (2, 1, 4, 1, 1, 0.0173, 3.40, 545.83, 3.13, 25, 2003, 2052,
         'comm_GSHP-heat 2003 installed base'),
        (2, 1, 5, 1, 1, 0.0262, 3.40, 545.83, 3.13, 25, 2003, 2052,
         'comm_GSHP-heat 2003 installed base'),
        (2, 1, 6, 1, 1, 0.0086, 3.40, 545.83, 3.13, 25, 2003, 2052,
         'comm_GSHP-heat 2003 installed base'),
        (2, 2, 4, 1, 1, 0, 3.50, 545.83, 3.13, 25, 2003, 2052,
         'comm_GSHP-heat 2012 installed base'),
        (2, 2, 5, 1, 1, 0, 3.50, 545.83, 3.13, 25, 2003, 2052,
         'comm_GSHP-heat 2012 installed base'),
        (2, 2, 6, 1, 1, 0, 3.50, 545.83, 3.13, 25, 2003, 2052,
         'comm_GSHP-heat 2012 installed base'),
        (2, 3, 4, 1, 1, 0, 3.60, 514.58, 3.13, 25, 2003, 2052,
         'comm_GSHP-heat 2013 typical'),
        (2, 3, 5, 1, 1, 0, 3.60, 514.58, 3.13, 25, 2003, 2052,
         'comm_GSHP-heat 2013 typical'),
        (2, 3, 6, 1, 1, 0, 3.60, 514.58, 3.13, 25, 2003, 2052,
         'comm_GSHP-heat 2013 typical'),
        (2, 4, 4, 1, 1, 0, 3.70, 530.21, 3.13, 25, 2003, 2052,
         'comm_GSHP-heat 2013 mid'),
        (2, 4, 5, 1, 1, 0, 3.70, 530.21, 3.13, 25, 2003, 2052,
         'comm_GSHP-heat 2013 mid'),
        (2, 4, 6, 1, 1, 0, 3.70, 530.21, 3.13, 25, 2003, 2052,
         'comm_GSHP-heat 2013 mid'),
        (2, 5, 4, 1, 1, 0, 4.00, 571.88, 3.13, 25, 2003, 2052,
         'comm_GSHP-heat 2013 high'),
        (2, 5, 5, 1, 1, 0, 4.00, 571.88, 3.13, 25, 2003, 2052,
         'comm_GSHP-heat 2013 high'),
        (2, 5, 6, 1, 1, 0, 4.00, 571.88, 3.13, 25, 2003, 2052,
         'comm_GSHP-heat 2013 high'),
        (2, 6, 4, 1, 1, 0, 3.80, 514.58, 3.13, 25, 2020, 2052,
         'comm_GSHP-heat 2020 typical'),
        (2, 6, 5, 1, 1, 0, 3.80, 514.58, 3.13, 25, 2020, 2052,
         'comm_GSHP-heat 2020 typical'),
        (2, 6, 6, 1, 1, 0, 3.80, 514.58, 3.13, 25, 2020, 2052,
         'comm_GSHP-heat 2020 typical'),
        (2, 7, 4, 1, 1, 0, 4.20, 571.88, 3.13, 25, 2020, 2052,
         'comm_GSHP-heat 2020 high'),
        (2, 7, 5, 1, 1, 0, 4.20, 571.88, 3.13, 25, 2020, 2052,
         'comm_GSHP-heat 2020 high'),
        (2, 7, 6, 1, 1, 0, 4.20, 571.88, 3.13, 25, 2020, 2052,
         'comm_GSHP-heat 2020 high'),
        (2, 10, 4, 1, 1, 0, 3.60, 514.58, 3.13, 25, 2008, 2016,
         'comm_GSHP-heat 2013 typ 10% ITC w MACRS'),
        (2, 10, 5, 1, 1, 0, 3.60, 514.58, 3.13, 25, 2008, 2016,
         'comm_GSHP-heat 2013 typ 10% ITC w MACRS'),
        (2, 10, 6, 1, 1, 0, 3.60, 514.58, 3.13, 25, 2008, 2016,
         'comm_GSHP-heat 2013 typ 10% ITC w MACRS'),
        (2, 11, 4, 1, 1, 0, 3.70, 530.21, 3.13, 25, 2008, 2016,
         'comm_GSHP-heat 2013 mid 10% ITC w MACRS'),
        (2, 11, 5, 1, 1, 0, 3.70, 530.21, 3.13, 25, 2008, 2016,
         'comm_GSHP-heat 2013 mid 10% ITC w MACRS'),
        (2, 11, 6, 1, 1, 0, 3.70, 530.21, 3.13, 25, 2008, 2016,
         'comm_GSHP-heat 2013 mid 10% ITC w MACRS'),
        (2, 12, 4, 1, 1, 0, 4.00, 571.88, 3.13, 25, 2008, 2016,
         'comm_GSHP-heat 2013 high 10% ITC w MACRS'),
        (2, 12, 5, 1, 1, 0, 4.00, 571.88, 3.13, 25, 2008, 2016,
         'comm_GSHP-heat 2013 high 10% ITC w MACRS'),
        (2, 12, 6, 1, 1, 0, 4.00, 571.88, 3.13, 25, 2008, 2016,
         'comm_GSHP-heat 2013 high 10% ITC w MACRS'),
        (46, 1, 4, 1, 1, 0.0809, 0.94, 16.68, 0.26, 15, 2003, 2052,
         'elec_boiler 2003 installed base'),
        (46, 1, 5, 1, 1, 0.0903, 0.94, 16.68, 0.26, 15, 2003, 2052,
         'elec_boiler 2003 installed base'),
        (46, 1, 6, 1, 1, 0.0356, 0.94, 16.68, 0.26, 15, 2003, 2052,
         'elec_boiler 2003 installed base'),
        (46, 2, 4, 1, 1, 0, 0.94, 21.13, 0.26, 15, 2012, 2052,
         'elec_boiler 2012 installed base'),
        (46, 2, 5, 1, 1, 0, 0.94, 21.13, 0.26, 15, 2012, 2052,
         'elec_boiler 2012 installed base'),
        (46, 2, 6, 1, 1, 0, 0.94, 21.13, 0.26, 15, 2012, 2052,
         'elec_boiler 2012 installed base'),
        (31, 1, 8, 4, 1, 0.7990, 0.37, 4798.93, 32.65, 20, 2003, 2003,
         'CAV_Vent 2003 installed base'),
        (31, 1, 9, 4, 1, 0.8629, 0.37, 4798.93, 32.65, 20, 2003, 2003,
         'CAV_Vent 2003 installed base'),
        (31, 1, 10, 4, 1, 0.8617, 0.37, 4798.93, 32.65, 20, 2003, 2003,
         'CAV_Vent 2003 installed base'),
        (31, 2, 8, 4, 1, 0.0000, 0.38, 5061.56, 34.43, 20, 2004, 2052,
         'CAV_Vent 2007 installed base'),
        (31, 2, 9, 4, 1, 0.0000, 0.38, 5061.56, 34.43, 20, 2004, 2052,
         'CAV_Vent 2007 installed base'),
        (31, 2, 10, 4, 1, 0.0000, 0.38, 5061.56, 34.43, 20, 2004, 2052,
         'CAV_Vent 2007 installed base'),
        (31, 3, 8, 4, 1, 0.0000, 0.41, 5061.56, 34.43, 20, 2011, 2052,
         'CAV_Vent 2011 minimum'),
        (31, 3, 9, 4, 1, 0.0000, 0.41, 5061.56, 34.43, 20, 2011, 2052,
         'CAV_Vent 2011 minimum'),
        (31, 3, 10, 4, 1, 0.0000, 0.41, 5061.56, 34.43, 20, 2011, 2052,
         'CAV_Vent 2011 minimum'),
        (31, 4, 8, 4, 1, 0.0000, 0.43, 5061.56, 34.43, 20, 2011, 2052,
         'CAV_Vent 2011 typical'),
        (31, 4, 9, 4, 1, 0.0000, 0.43, 5061.56, 34.43, 20, 2011, 2052,
         'CAV_Vent 2011 typical'),
        (31, 4, 10, 4, 1, 0.0000, 0.43, 5061.56, 34.43, 20, 2011, 2052,
         'CAV_Vent 2011 typical'),
        (31, 5, 8, 4, 1, 0.0000, 0.48, 5509.18, 34.43, 20, 2011, 2052,
         'CAV_Vent 2011 high'),
        (31, 5, 9, 4, 1, 0.0000, 0.48, 5509.18, 34.43, 20, 2011, 2052,
         'CAV_Vent 2011 high'),
        (31, 5, 10, 4, 1, 0.0000, 0.48, 5509.18, 34.43, 20, 2011, 2052,
         'CAV_Vent 2011 high'),
        (31, 10, 8, 4, 1, 0.0000, 0.51, 5061.56, 34.43, 20, 2020, 2052,
         'CAV_Vent 2020 typical'),
        (31, 10, 9, 4, 1, 0.0000, 0.51, 5061.56, 34.43, 20, 2020, 2052,
         'CAV_Vent 2020 typical'),
        (31, 10, 10, 4, 1, 0.0000, 0.51, 5061.56, 34.43, 20, 2020, 2052,
         'CAV_Vent 2020 typical'),
        (31, 11, 8, 4, 1, 0.0000, 0.58, 5509.18, 34.43, 20, 2020, 2052,
         'CAV_Vent 2020 high'),
        (31, 11, 9, 4, 1, 0.0000, 0.58, 5509.18, 34.43, 20, 2020, 2052,
         'CAV_Vent 2020 high'),
        (31, 11, 10, 4, 1, 0.0000, 0.58, 5509.18, 34.43, 20, 2020, 2052,
         'CAV_Vent 2020 high'),
        (32, 1, 8, 4, 1, 0.2010, 1.15, 6266.69, 18.94, 20, 2003, 2003,
         'VAV_Vent 20003 installed base'),
        (32, 1, 9, 4, 1, 0.1371, 1.15, 6266.69, 18.94, 20, 2003, 2003,
         'VAV_Vent 20003 installed base'),
        (32, 1, 10, 4, 1, 0.1383, 1.15, 6266.69, 18.94, 20, 2003, 2003,
         'VAV_Vent 20003 installed base'),
        (32, 2, 8, 4, 1, 0.0000, 1.26, 6266.69, 18.94, 20, 2004, 2052,
         'VAV_Vent 2007 installed base'),
        (32, 2, 9, 4, 1, 0.0000, 1.26, 6266.69, 18.94, 20, 2004, 2052,
         'VAV_Vent 2007 installed base'),
        (32, 2, 10, 4, 1, 0.0000, 1.26, 6266.69, 18.94, 20, 2004, 2052,
         'VAV_Vent 2007 installed base'),
        (32, 3, 8, 4, 1, 0.0000, 1.28, 6266.69, 18.94, 20, 2011, 2052,
         'VAV_Vent 2011 minimum'),
        (32, 3, 9, 4, 1, 0.0000, 1.28, 6266.69, 18.94, 20, 2011, 2052,
         'VAV_Vent 2011 minimum'),
        (32, 3, 10, 4, 1, 0.0000, 1.28, 6266.69, 18.94, 20, 2011, 2052,
         'VAV_Vent 2011 minimum'),
        (32, 4, 8, 4, 1, 0.0000, 1.34, 6266.69, 18.94, 20, 2011, 2052,
         'VAV_Vent 2011 typical'),
        (32, 4, 9, 4, 1, 0.0000, 1.34, 6266.69, 18.94, 20, 2011, 2052,
         'VAV_Vent 2011 typical'),
        (32, 4, 10, 4, 1, 0.0000, 1.34, 6266.69, 18.94, 20, 2011, 2052,
         'VAV_Vent 2011 typical'),
        (32, 5, 8, 4, 1, 0.0000, 1.50, 6886.47, 18.94, 20, 2011, 2052,
         'VAV_Vent 2011 high'),
        (32, 5, 9, 4, 1, 0.0000, 1.50, 6886.47, 18.94, 20, 2011, 2052,
         'VAV_Vent 2011 high'),
        (32, 5, 10, 4, 1, 0.0000, 1.50, 6886.47, 18.94, 20, 2011, 2052,
         'VAV_Vent 2011 high'),
        (32, 10, 8, 4, 1, 0.0000, 1.59, 6266.69, 18.94, 20, 2020, 2052,
         'VAV_Vent 2020 typical'),
        (32, 10, 9, 4, 1, 0.0000, 1.59, 6266.69, 18.94, 20, 2020, 2052,
         'VAV_Vent 2020 typical'),
        (32, 10, 10, 4, 1, 0.0000, 1.59, 6266.69, 18.94, 20, 2020, 2052,
         'VAV_Vent 2020 typical'),
        (32, 11, 8, 4, 1, 0.0000, 1.82, 6886.47, 18.94, 20, 2020, 2052,
         'VAV_Vent 2020 high'),
        (32, 11, 9, 4, 1, 0.0000, 1.82, 6886.47, 18.94, 20, 2020, 2052,
         'VAV_Vent 2020 high'),
        (32, 11, 10, 4, 1, 0.0000, 1.82, 6886.47, 18.94, 20, 2020, 2052,
         'VAV_Vent 2020 high'),
        (24, 7, 9, 6, 1, 0.0000, 42.4, 84.67, 0.90, 15, 2011, 2052,
         '23W CFL 2011 typical'),
        (24, 7, 10, 6, 1, 0.0000, 42.4, 84.67, 0.90, 15, 2011, 2052,
         '23W CFL 2011 typical'),
        (24, 7, 11, 6, 1, 0.0000, 42.4, 84.67, 0.90, 15, 2011, 2052,
         '23W CFL 2011 typical'),
        (24, 8, 9, 6, 1, 0.0000, 44.6, 78.62, 0.86, 15, 2020, 2052,
         '23W CFL 2020 typical'),
        (24, 8, 10, 6, 1, 0.0000, 44.6, 78.62, 0.86, 15, 2020, 2052,
         '23W CFL 2020 typical'),
        (24, 8, 11, 6, 1, 0.0000, 44.6, 78.62, 0.86, 15, 2020, 2052,
         '23W CFL 2020 typical'),
        (24, 9, 9, 6, 1, 0.0000, 46.8, 73.01, 0.81, 15, 2030, 2052,
         '23W CFL 2030 typical'),
        (24, 9, 10, 6, 1, 0.0000, 46.8, 73.01, 0.81, 15, 2030, 2052,
         '23W CFL 2030 typical'),
        (24, 9, 11, 6, 1, 0.0000, 46.8, 73.01, 0.81, 15, 2030, 2052,
         '23W CFL 2030 typical'),
        (24, 15, 9, 6, 1, 0.0383, 13.5, 81.89, 8.34, 15, 2003, 2012,
         '90W Halogen PAR-38 2003 installed base'),
        (24, 15, 10, 6, 1, 0.1290, 13.5, 81.89, 8.34, 15, 2003, 2012,
         '90W Halogen PAR-38 2003 installed base'),
        (24, 15, 11, 6, 1, 0.0273, 13.5, 81.89, 8.34, 15, 2003, 2012,
         '90W Halogen PAR-38 2003 installed base'),
        (24, 16, 9, 6, 1, 0.0000, 13.5, 67.01, 7.05, 15, 2007, 2012,
         '90W Halogen PAR-38 2007 installed base'),
        (24, 16, 10, 6, 1, 0.0000, 13.5, 67.01, 7.05, 15, 2007, 2012,
         '90W Halogen PAR-38 2007 installed base'),
        (24, 16, 11, 6, 1, 0.0000, 13.5, 67.01, 7.05, 15, 2007, 2012,
         '90W Halogen PAR-38 2007 installed base'),
        (24, 17, 9, 6, 1, 0.0000, 13.7, 68.02, 5.49, 15, 2011, 2052,
         '90W Halogen PAR-38 2011 typical'),
        (24, 17, 10, 6, 1, 0.0000, 13.7, 68.02, 5.49, 15, 2011, 2052,
         '90W Halogen PAR-38 2011 typical'),
        (24, 17, 11, 6, 1, 0.0000, 13.7, 68.02, 5.49, 15, 2011, 2052,
         '90W Halogen PAR-38 2011 typical'),
        (24, 18, 9, 6, 1, 0.0000, 14.3, 64.17, 5.21, 15, 2020, 2052,
         '90W Halogen PAR-38 2020 typical'),
        (24, 18, 10, 6, 1, 0.0000, 14.3, 64.17, 5.21, 15, 2020, 2052,
         '90W Halogen PAR-38 2020 typical'),
        (24, 18, 11, 6, 1, 0.0000, 14.3, 64.17, 5.21, 15, 2020, 2052,
         '90W Halogen PAR-38 2020 typical'),
        (24, 20, 9, 6, 1, 0.0000, 16.7, 86.30, 9.10, 15, 2003, 2012,
         '70W HIR PAR-38 2003 installed base'),
        (24, 20, 10, 6, 1, 0.0000, 16.7, 86.30, 9.10, 15, 2003, 2012,
         '70W HIR PAR-38 2003 installed base'),
        (24, 20, 11, 6, 1, 0.0000, 16.7, 86.30, 9.10, 15, 2003, 2012,
         '70W HIR PAR-38 2003 installed base'),
        (24, 21, 9, 6, 1, 0.0000, 16.7, 70.63, 7.64, 15, 2007, 2012,
         '70W HIR PAR-38 2007 installed base'),
        (24, 21, 10, 6, 1, 0.0000, 16.7, 70.63, 7.64, 15, 2007, 2012,
         '70W HIR PAR-38 2007 installed base'),
        (24, 21, 11, 6, 1, 0.0000, 16.7, 70.63, 7.64, 15, 2007, 2012,
         '70W HIR PAR-38 2007 installed base'),
        (24, 22, 9, 6, 1, 0.0000, 18.7, 73.56, 12.04, 15, 2011, 2052,
         '70W HIR PAR-38 2011 typical'),
        (24, 22, 10, 6, 1, 0.0000, 18.7, 73.56, 12.04, 15, 2011, 2052,
         '70W HIR PAR-38 2011 typical'),
        (24, 22, 11, 6, 1, 0.0000, 18.7, 73.56, 12.04, 15, 2011, 2052,
         '70W HIR PAR-38 2011 typical'),
        (24, 23, 9, 6, 1, 0.0000, 19.6, 69.32, 11.40, 15, 2020, 2052,
         '70W HIR PAR-38 2020 typical'),
        (24, 23, 10, 6, 1, 0.0000, 19.6, 69.32, 11.40, 15, 2020, 2052,
         '70W HIR PAR-38 2020 typical'),
        (24, 23, 11, 6, 1, 0.0000, 19.6, 69.32, 11.40, 15, 2020, 2052,
         '70W HIR PAR-38 2020 typical'),
        (24, 25, 9, 6, 1, 0.0000, 15.1, 509.77, 27.52, 15, 2003, 2019,
         'LED Edison 2003 installed base'),
        (24, 25, 10, 6, 1, 0.0000, 15.1, 509.77, 27.52, 15, 2003, 2019,
         'LED Edison 2003 installed base'),
        (24, 25, 11, 6, 1, 0.0000, 15.1, 509.77, 27.52, 15, 2003, 2019,
         'LED Edison 2003 installed base'),
        (24, 26, 9, 6, 1, 0.0000, 51.0, 296.81, 28.71, 15, 2007, 2052,
         'LED Edison 2007 installed base'),
        (24, 26, 10, 6, 1, 0.0000, 51.0, 296.81, 28.71, 15, 2007, 2052,
         'LED Edison 2007 installed base'),
        (24, 26, 11, 6, 1, 0.0000, 51.0, 296.81, 28.71, 15, 2007, 2052,
         'LED Edison 2007 installed base'),
        (24, 27, 9, 6, 1, 0.0000, 60.0, 167.69, 5.69, 15, 2011, 2052,
         'LED Edison 2011 typical'),
        (24, 27, 10, 6, 1, 0.0000, 60.0, 167.69, 5.69, 15, 2011, 2052,
         'LED Edison 2011 typical'),
        (24, 27, 11, 6, 1, 0.0000, 60.0, 167.69, 5.69, 15, 2011, 2052,
         'LED Edison 2011 typical'),
        (24, 28, 9, 6, 1, 0.0000, 170.0, 105.71, 1.04, 15, 2020, 2052,
         'LED Edison 2020 typical'),
        (24, 28, 10, 6, 1, 0.0000, 170.0, 105.71, 1.04, 15, 2020, 2052,
         'LED Edison 2020 typical'),
        (24, 28, 11, 6, 1, 0.0000, 170.0, 105.71, 1.04, 15, 2020, 2052,
         'LED Edison 2020 typical'),
        (24, 29, 9, 6, 1, 0.0000, 202.0, 98.48, 0.72, 15, 2030, 2052,
         'LED Edison 2030 typical'),
        (24, 29, 10, 6, 1, 0.0000, 202.0, 98.48, 0.72, 15, 2030, 2052,
         'LED Edison 2030 typical'),
        (24, 29, 11, 6, 1, 0.0000, 202.0, 98.48, 0.72, 15, 2030, 2052,
         'LED Edison 2030 typical'),
        (25, 1, 9, 6, 1, 0.0364, 41.6, 19.77, 1.45, 15, 2003, 2005,
         'F34T12'),
        (25, 1, 10, 6, 1, 0.0288, 41.6, 19.77, 1.45, 15, 2003, 2005,
         'F34T12'),
        (25, 1, 11, 6, 1, 0.0286, 41.6, 19.77, 1.45, 15, 2003, 2005,
         'F34T12'),
        (25, 2, 9, 6, 1, 0.1090, 59.0, 31.11, 0.84, 15, 2003, 2052,
         'T8 F32 EEMag (e)'),
        (25, 2, 10, 6, 1, 0.0864, 59.0, 31.11, 0.84, 15, 2003, 2052,
         'T8 F32 EEMag (e)'),
        (25, 2, 11, 6, 1, 0.0856, 59.0, 31.11, 0.84, 15, 2003, 2052,
         'T8 F32 EEMag (e)'),
        (25, 9, 9, 6, 1, 0.0074, 151.1, 24.68, 1.61, 15, 2003, 2012,
         'F28T8 HE w/ OS 2011 typical'),
        (25, 9, 10, 6, 1, 0.0007, 151.1, 24.68, 1.61, 15, 2003, 2012,
         'F28T8 HE w/ OS 2011 typical'),
        (25, 9, 11, 6, 1, 0.0238, 151.1, 24.68, 1.61, 15, 2003, 2012,
         'F28T8 HE w/ OS 2011 typical'),
        (25, 10, 9, 6, 1, 0.0000, 162.5, 24.08, 1.58, 15, 2020, 2029,
         'F28T8 HE w/ OS 2020 typical'),
        (25, 10, 10, 6, 1, 0.0000, 162.5, 24.08, 1.58, 15, 2020, 2029,
         'F28T8 HE w/ OS 2020 typical'),
        (25, 10, 11, 6, 1, 0.0000, 162.5, 24.08, 1.58, 15, 2020, 2029,
         'F28T8 HE w/ OS 2020 typical'),
        (25, 11, 9, 6, 1, 0.0000, 165.2, 23.43, 1.54, 15, 2030, 2052,
         'F28T8 HE w/ OS 2030 typical'),
        (25, 11, 10, 6, 1, 0.0000, 165.2, 23.43, 1.54, 15, 2030, 2052,
         'F28T8 HE w/ OS 2030 typical'),
        (25, 11, 11, 6, 1, 0.0000, 165.2, 23.43, 1.54, 15, 2030, 2052,
         'F28T8 HE w/ OS 2030 typical')],
        dtype=[('t', 'i4'), ('v', 'i4'), ('r', 'i4'), ('s', 'i4'), ('f', 'i4'),
               ('Shr', 'f8'), ('eff', 'f8'), ('c1', 'f8'), ('c2', 'f8'),
               ('Life', 'i4'), ('y1', 'i4'), ('y2', 'i4'),
               ('technology name', '<U50')])

    # Define an array of service demand data that are needed to
    # process the technology cost, performance, and lifetime data
    sd_data = 0

    # Define a list of the microsegments converted to numeric indices
    # from the human-readable (i.e., words) category text in the
    # underlying empty JSON database that define what data should be
    # selected from the tech_data and sd_data arrays
    data_to_select = [[4, 6, 1, 1],
                      [2, 8, 4, 1],
                      [9, 10, 6, 1]]
    # Note that the conversion from the category text to numbers isn't
    # tested here since the existing function is already tested separately

    # Define a list of numpy arrays that represent the data selected
    # from the tech_data array based on the data_to_select lists
    selected_data = [
        np.array([
            (1, 1, 4, 1, 1, 0.015, 3.1, 67.78, 1.47, 15, 2003, 2009,
             'rooftop_ASHP-heat 2003 installed base'),
            (1, 2, 4, 1, 1, 0.0, 3.25, 81.39, 1.47, 15, 2003, 2009,
             'rooftop_ASHP-heat 2012 installed base'),
            (1, 3, 4, 1, 1, 0.0, 3.3, 81.39, 1.47, 15, 2003, 2052,
             'rooftop_ASHP-heat 2013 current standard/ typical'),
            (1, 4, 4, 1, 1, 0.0, 3.35, 83.61, 1.47, 15, 2003, 2052,
             'rooftop_ASHP-heat 2013 ENERGY STAR'),
            (1, 5, 4, 1, 1, 0.0, 3.4, 102.78, 1.47, 15, 2003, 2052,
             'rooftop_ASHP-heat 2013 high'),
            (1, 6, 4, 1, 1, 0.0, 3.3, 81.39, 1.47, 15, 2020, 2052,
             'rooftop_ASHP-heat 2020 typical'),
            (1, 7, 4, 1, 1, 0.0, 3.4, 102.78, 1.47, 15, 2020, 2052,
             'rooftop_ASHP-heat 2020 high'),
            (2, 1, 4, 1, 1, 0.0173, 3.4, 545.83, 3.13, 25, 2003, 2052,
             'comm_GSHP-heat 2003 installed base'),
            (2, 2, 4, 1, 1, 0.0, 3.5, 545.83, 3.13, 25, 2003, 2052,
             'comm_GSHP-heat 2012 installed base'),
            (2, 3, 4, 1, 1, 0.0, 3.6, 514.58, 3.13, 25, 2003, 2052,
             'comm_GSHP-heat 2013 typical'),
            (2, 4, 4, 1, 1, 0.0, 3.7, 530.21, 3.13, 25, 2003, 2052,
             'comm_GSHP-heat 2013 mid'),
            (2, 5, 4, 1, 1, 0.0, 4.0, 571.88, 3.13, 25, 2003, 2052,
             'comm_GSHP-heat 2013 high'),
            (2, 6, 4, 1, 1, 0.0, 3.8, 514.58, 3.13, 25, 2020, 2052,
             'comm_GSHP-heat 2020 typical'),
            (2, 7, 4, 1, 1, 0.0, 4.2, 571.88, 3.13, 25, 2020, 2052,
             'comm_GSHP-heat 2020 high'),
            (2, 10, 4, 1, 1, 0.0, 3.6, 514.58, 3.13, 25, 2008, 2016,
             'comm_GSHP-heat 2013 typ 10% ITC w MACRS'),
            (2, 11, 4, 1, 1, 0.0, 3.7, 530.21, 3.13, 25, 2008, 2016,
             'comm_GSHP-heat 2013 mid 10% ITC w MACRS'),
            (2, 12, 4, 1, 1, 0.0, 4.0, 571.88, 3.13, 25, 2008, 2016,
             'comm_GSHP-heat 2013 high 10% ITC w MACRS'),
            (46, 1, 4, 1, 1, 0.0809, 0.94, 16.68, 0.26, 15, 2003, 2052,
             'elec_boiler 2003 installed base'),
            (46, 2, 4, 1, 1, 0.0, 0.94, 21.13, 0.26, 15, 2012, 2052,
             'elec_boiler 2012 installed base')],
            dtype=[('t', 'i4'), ('v', 'i4'), ('r', 'i4'), ('s', 'i4'),
                   ('f', 'i4'), ('Shr', 'f8'), ('eff', 'f8'), ('c1', 'f8'),
                   ('c2', 'f8'), ('Life', 'i4'), ('y1', 'i4'), ('y2', 'i4'),
                   ('technology name', '<U50')]),
        np.array([
            (31, 1, 8, 4, 1, 0.799, 0.37, 4798.93, 32.65, 20, 2003, 2003,
             'CAV_Vent 2003 installed base'),
            (31, 2, 8, 4, 1, 0.0, 0.38, 5061.56, 34.43, 20, 2004, 2052,
             'CAV_Vent 2007 installed base'),
            (31, 3, 8, 4, 1, 0.0, 0.41, 5061.56, 34.43, 20, 2011, 2052,
             'CAV_Vent 2011 minimum'),
            (31, 4, 8, 4, 1, 0.0, 0.43, 5061.56, 34.43, 20, 2011, 2052,
             'CAV_Vent 2011 typical'),
            (31, 5, 8, 4, 1, 0.0, 0.48, 5509.18, 34.43, 20, 2011, 2052,
             'CAV_Vent 2011 high'),
            (31, 10, 8, 4, 1, 0.0, 0.51, 5061.56, 34.43, 20, 2020, 2052,
             'CAV_Vent 2020 typical'),
            (31, 11, 8, 4, 1, 0.0, 0.58, 5509.18, 34.43, 20, 2020, 2052,
             'CAV_Vent 2020 high'),
            (32, 1, 8, 4, 1, 0.201, 1.15, 6266.69, 18.94, 20, 2003, 2003,
             'VAV_Vent 20003 installed base'),
            (32, 2, 8, 4, 1, 0.0, 1.26, 6266.69, 18.94, 20, 2004, 2052,
             'VAV_Vent 2007 installed base'),
            (32, 3, 8, 4, 1, 0.0, 1.28, 6266.69, 18.94, 20, 2011, 2052,
             'VAV_Vent 2011 minimum'),
            (32, 4, 8, 4, 1, 0.0, 1.34, 6266.69, 18.94, 20, 2011, 2052,
             'VAV_Vent 2011 typical'),
            (32, 5, 8, 4, 1, 0.0, 1.5, 6886.47, 18.94, 20, 2011, 2052,
             'VAV_Vent 2011 high'),
            (32, 10, 8, 4, 1, 0.0, 1.59, 6266.69, 18.94, 20, 2020, 2052,
             'VAV_Vent 2020 typical'),
            (32, 11, 8, 4, 1, 0.0, 1.82, 6886.47, 18.94, 20, 2020, 2052,
             'VAV_Vent 2020 high')],
            dtype=[('t', 'i4'), ('v', 'i4'), ('r', 'i4'), ('s', 'i4'),
                   ('f', 'i4'), ('Shr', 'f8'), ('eff', 'f8'), ('c1', 'f8'),
                   ('c2', 'f8'), ('Life', 'i4'), ('y1', 'i4'), ('y2', 'i4'),
                   ('technology name', '<U50')]),
        np.array([
            (24, 7, 10, 6, 1, 0.0, 42.4, 84.67, 0.9, 15, 2011, 2052,
             '23W CFL 2011 typical'),
            (24, 8, 10, 6, 1, 0.0, 44.6, 78.62, 0.86, 15, 2020, 2052,
             '23W CFL 2020 typical'),
            (24, 9, 10, 6, 1, 0.0, 46.8, 73.01, 0.81, 15, 2030, 2052,
             '23W CFL 2030 typical'),
            (24, 15, 10, 6, 1, 0.129, 13.5, 81.89, 8.34, 15, 2003, 2012,
             '90W Halogen PAR-38 2003 installed base'),
            (24, 16, 10, 6, 1, 0.0, 13.5, 67.01, 7.05, 15, 2007, 2012,
             '90W Halogen PAR-38 2007 installed base'),
            (24, 17, 10, 6, 1, 0.0, 13.7, 68.02, 5.49, 15, 2011, 2052,
             '90W Halogen PAR-38 2011 typical'),
            (24, 18, 10, 6, 1, 0.0, 14.3, 64.17, 5.21, 15, 2020, 2052,
             '90W Halogen PAR-38 2020 typical'),
            (24, 20, 10, 6, 1, 0.0, 16.7, 86.3, 9.1, 15, 2003, 2012,
             '70W HIR PAR-38 2003 installed base'),
            (24, 21, 10, 6, 1, 0.0, 16.7, 70.63, 7.64, 15, 2007, 2012,
             '70W HIR PAR-38 2007 installed base'),
            (24, 22, 10, 6, 1, 0.0, 18.7, 73.56, 12.04, 15, 2011, 2052,
             '70W HIR PAR-38 2011 typical'),
            (24, 23, 10, 6, 1, 0.0, 19.6, 69.32, 11.4, 15, 2020, 2052,
             '70W HIR PAR-38 2020 typical'),
            (24, 25, 10, 6, 1, 0.0, 15.1, 509.77, 27.52, 15, 2003, 2019,
             'LED Edison 2003 installed base'),
            (24, 26, 10, 6, 1, 0.0, 51.0, 296.81, 28.71, 15, 2007, 2052,
             'LED Edison 2007 installed base'),
            (24, 27, 10, 6, 1, 0.0, 60.0, 167.69, 5.69, 15, 2011, 2052,
             'LED Edison 2011 typical'),
            (24, 28, 10, 6, 1, 0.0, 170.0, 105.71, 1.04, 15, 2020, 2052,
             'LED Edison 2020 typical'),
            (24, 29, 10, 6, 1, 0.0, 202.0, 98.48, 0.72, 15, 2030, 2052,
             'LED Edison 2030 typical'),
            (25, 1, 10, 6, 1, 0.0288, 41.6, 19.77, 1.45, 15, 2003, 2005,
             'F34T12'),
            (25, 2, 10, 6, 1, 0.0864, 59.0, 31.11, 0.84, 15, 2003, 2052,
             'T8 F32 EEMag (e)'),
            (25, 9, 10, 6, 1, 0.0007, 151.1, 24.68, 1.61, 15, 2003, 2012,
             'F28T8 HE w/ OS 2011 typical'),
            (25, 10, 10, 6, 1, 0.0, 162.5, 24.08, 1.58, 15, 2020, 2029,
             'F28T8 HE w/ OS 2020 typical'),
            (25, 11, 10, 6, 1, 0.0, 165.2, 23.43, 1.54, 15, 2030, 2052,
             'F28T8 HE w/ OS 2030 typical')],
            dtype=[('t', 'i4'), ('v', 'i4'), ('r', 'i4'), ('s', 'i4'),
                   ('f', 'i4'), ('Shr', 'f8'), ('eff', 'f8'), ('c1', 'f8'),
                   ('c2', 'f8'), ('Life', 'i4'), ('y1', 'i4'), ('y2', 'i4'),
                   ('technology name', '<U50')])]

    # Define a list of the dicts of performance levels for each
    # technology in the desired form to be output to a JSON database
    result_perf = 0

    # Define a list of years for which the data should be output
    tmp_yrs = list(range(2009, 2021))  # 2009 - 2020

    # Define a list of the dicts of capital cost data to be generated
    # for output to a JSON database
    result_cost = [
        {'typical':
            {'2009': 83.39, '2010': 89.26, '2011': 89.26, '2012': 89.26,
             '2013': 89.26, '2014': 89.26, '2015': 89.26, '2016': 89.26,
             '2017': 89.26, '2018': 89.26, '2019': 89.26, '2020': 90.39,
             '2021': 90.39, '2022': 90.39, '2023': 90.39, '2024': 90.39,
             '2025': 90.39, '2026': 90.39, '2027': 90.39, '2028': 90.39,
             '2029': 90.39, '2030': 90.39, '2031': 90.39, '2032': 90.39,
             '2033': 90.39, '2034': 90.39, '2035': 90.39, '2036': 90.39,
             '2037': 90.39, '2038': 90.39, '2039': 90.39, '2040': 90.39},
         'best':
            {'2009': 102.78, '2010': 102.78, '2011': 102.78, '2012': 102.78,
             '2013': 102.78, '2014': 102.78, '2015': 102.78, '2016': 102.78,
             '2017': 102.78, '2018': 102.78, '2019': 102.78, '2020': 102.78,
             '2021': 102.78, '2022': 102.78, '2023': 102.78, '2024': 102.78,
             '2025': 102.78, '2026': 102.78, '2027': 102.78, '2028': 102.78,
             '2029': 102.78, '2030': 102.78, '2031': 102.78, '2032': 102.78,
             '2033': 102.78, '2034': 102.78, '2035': 102.78, '2036': 102.78,
             '2037': 102.78, '2038': 102.78, '2039': 102.78, '2040': 102.78}},
        {'typical':
            {'2009': 6266.69, '2010': 6266.69, '2011': 6421.635,
             '2012': 6421.635, '2013': 6421.635, '2014': 6421.635,
             '2015': 6421.635, '2016': 6421.635, '2017': 6421.635,
             '2018': 6421.635, '2019': 6421.635, '2020': 6473.2833,
             '2021': 6473.2833, '2022': 6473.2833, '2023': 6473.2833,
             '2024': 6473.2833, '2025': 6473.2833, '2026': 6473.2833,
             '2027': 6473.2833, '2028': 6473.2833, '2029': 6473.2833,
             '2030': 6499.1075, '2031': 6499.1075, '2032': 6499.1075,
             '2033': 6499.1075, '2034': 6499.1075, '2035': 6499.1075,
             '2036': 6499.1075, '2037': 6499.1075, '2038': 6499.1075,
             '2039': 6499.1075, '2040': 6514.602},
         'best':
            {'2009': 6266.69, '2010': 6266.69, '2011': 6886.47,
             '2012': 6886.47, '2013': 6886.47, '2014': 6886.47,
             '2015': 6886.47, '2016': 6886.47, '2017': 6886.47,
             '2018': 6886.47, '2019': 6886.47, '2020': 6886.47,
             '2021': 6886.47, '2022': 6886.47, '2023': 6886.47,
             '2024': 6886.47, '2025': 6886.47, '2026': 6886.47,
             '2027': 6886.47, '2028': 6886.47, '2029': 6886.47,
             '2030': 6886.47, '2031': 6886.47, '2032': 6886.47,
             '2033': 6886.47, '2034': 6886.47, '2035': 6886.47,
             '2036': 6886.47, '2037': 6886.47, '2038': 6886.47,
             '2039': 6886.47, '2040': 6886.47}},
        {'typical':
            {'2009': 78.465, '2010': 78.465, '2011': 76.83, '2012': 76.83,
             '2013': 73.56, '2014': 73.56, '2015': 73.56, '2016': 73.56,
             '2017': 73.56, '2018': 73.56, '2019': 73.56, '2020': 71.44,
             '2021': 71.44, '2022': 71.44, '2023': 71.44, '2024': 71.44,
             '2025': 71.44, '2026': 71.44, '2027': 71.44, '2028': 71.44,
             '2029': 71.44, '2030': 69.413, '2031': 69.413, '2032': 69.413,
             '2033': 69.413, '2034': 69.413, '2035': 69.413, '2036': 69.413,
             '2037': 69.413, '2038': 69.413, '2039': 69.413, '2040': 69.413},
         'best':
            {'2009': 86.30, '2010': 86.30, '2011': 86.30, '2012': 86.30,
             '2013': 73.56, '2014': 73.56, '2015': 73.56, '2016': 73.56,
             '2017': 73.56, '2018': 73.56, '2019': 73.56, '2020': 73.56,
             '2021': 73.56, '2022': 73.56, '2023': 73.56, '2024': 73.56,
             '2025': 73.56, '2026': 73.56, '2027': 73.56, '2028': 73.56,
             '2029': 73.56, '2030': 73.56, '2031': 73.56, '2032': 73.56,
             '2033': 73.56, '2034': 73.56, '2035': 73.56, '2036': 73.56,
             '2037': 73.56, '2038': 73.56, '2039': 73.56, '2040': 73.56}}]

    # Define a list of dicts with the mean and range of equipment
    # lifetimes (in years) for each of the technologies tested
    result_life = 0


class TechnologyDataSelectionTest(CommonUnitTest):
    """ Test the function that selects from the technology data array
    only the rows of data for a specified microsegment """

    # Test that the correct data are returned
    def test_selection_from_technology_data(self):
        for idx, sel in enumerate(self.data_to_select):
            self.assertCountEqual(cmt.tech_data_selector(self.tech_data, sel),
                                  self.selected_data[idx])


class PerformanceDataExtractionTest(CommonUnitTest):
    """ docstring """
    pass


# class CostDataExtractionTest(CommonUnitTest):
#     """ Test the function that extracts the technology cost data from
#     the source data arrays and converts them into the desired form to
#     be output to the cost/performance/lifetime JSON """

#     # Create a function for checking equality of a dict with point values
#     def dict_check(self, dict1, dict2):
#         for (k, i), (k2, i2) in zip(sorted(dict1.items()),
#                                     sorted(dict2.items())):
#             if isinstance(i, dict):
#                 self.assertCountEqual(i, i2)
#                 self.dict_check(i, i2)
#             else:
#                 self.assertAlmostEqual(dict1[k], dict2[k2], places=2)

#     # Test equality of the dicts of cost data generated for each technology
#     def test_cost_selection_and_conversion(self):
#         for idx, input_array in enumerate(self.selected_data):
#             self.dict_check(cmt.cost_extractor(input_array, self.tmp_yrs),
#                             self.result_cost[idx])


class LifetimeDataExtractionTest(CommonUnitTest):
    """ docstring """
    pass


class ChoiceModelParametersExtractionTest(CommonUnitTest):
    """ docstring """
    pass


# Offer external code execution (include all lines below this point in all
# test files)
def main():
    # Triggers default behavior of running all test fixtures in the file
    unittest.main()

if __name__ == '__main__':
    main()
