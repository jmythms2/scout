#!/usr/bin/env python3

# Import code to be tested
import com_mseg_tech as cmt

# Import packages
import unittest
import numpy as np


class CommonUnitTest(unittest.TestCase):
    """ Top level test class that contains common variables with data so
    that all tests are easily set up to use a consistent body of data.
    This class also includes custom testing functions used in multiple
    child test classes. """

    # Define an array taking the form of the EIA cost, performance, and
    # lifetime data, but with a reduced set of columns incorporating
    # only the data required as final outputs and with rows modified to
    # represent the full range of data in the EIA data without having
    # an excessive number of rows
    tech_data = np.array([
        (1, 1, 4, 1, 1, 0.0150, 3.10, 67.78, 1.47, 15, 2003, 2009,
         'rooftop_ASHP-heat 2003 installed base'),
        (1, 1, 5, 1, 1, 0.1578, 3.10, 67.78, 1.47, 15, 2003, 2009,
         'rooftop_ASHP-heat 2003 installed base'),
        (1, 1, 6, 1, 1, 0.1002, 3.10, 67.78, 1.47, 15, 2003, 2009,
         'rooftop_ASHP-heat 2003 installed base'),
        (1, 2, 4, 1, 1, 0, 3.25, 81.39, 1.47, 15, 2003, 2009,
         'rooftop_ASHP-heat 2012 installed base'),
        (1, 2, 5, 1, 1, 0, 3.25, 81.39, 1.47, 15, 2003, 2009,
         'rooftop_ASHP-heat 2012 installed base'),
        (1, 2, 6, 1, 1, 0, 3.25, 81.39, 1.47, 15, 2003, 2009,
         'rooftop_ASHP-heat 2012 installed base'),
        (1, 3, 4, 1, 1, 0, 3.30, 81.39, 1.47, 15, 2003, 2052,
         'rooftop_ASHP-heat 2013 current standard/ typical'),
        (1, 3, 5, 1, 1, 0, 3.30, 81.39, 1.47, 15, 2003, 2052,
         'rooftop_ASHP-heat 2013 current standard/ typical'),
        (1, 3, 6, 1, 1, 0, 3.30, 81.39, 1.47, 15, 2003, 2052,
         'rooftop_ASHP-heat 2013 current standard/ typical'),
        (1, 4, 4, 1, 1, 0, 3.35, 83.61, 1.47, 15, 2003, 2052,
         'rooftop_ASHP-heat 2013 ENERGY STAR'),
        (1, 4, 5, 1, 1, 0, 3.35, 83.61, 1.47, 15, 2003, 2052,
         'rooftop_ASHP-heat 2013 ENERGY STAR'),
        (1, 4, 6, 1, 1, 0, 3.35, 83.61, 1.47, 15, 2003, 2052,
         'rooftop_ASHP-heat 2013 ENERGY STAR'),
        (1, 5, 4, 1, 1, 0, 3.40, 102.78, 1.47, 15, 2003, 2052,
         'rooftop_ASHP-heat 2013 high'),
        (1, 5, 5, 1, 1, 0, 3.40, 102.78, 1.47, 15, 2003, 2052,
         'rooftop_ASHP-heat 2013 high'),
        (1, 5, 6, 1, 1, 0, 3.40, 102.78, 1.47, 15, 2003, 2052,
         'rooftop_ASHP-heat 2013 high'),
        (1, 6, 4, 1, 1, 0, 3.30, 81.39, 1.47, 15, 2020, 2052,
         'rooftop_ASHP-heat 2020 typical'),
        (1, 6, 5, 1, 1, 0, 3.30, 81.39, 1.47, 15, 2020, 2052,
         'rooftop_ASHP-heat 2020 typical'),
        (1, 6, 6, 1, 1, 0, 3.30, 81.39, 1.47, 15, 2020, 2052,
         'rooftop_ASHP-heat 2020 typical'),
        (1, 7, 4, 1, 1, 0, 3.40, 102.78, 1.47, 15, 2020, 2052,
         'rooftop_ASHP-heat 2020 high'),
        (1, 7, 5, 1, 1, 0, 3.40, 102.78, 1.47, 15, 2020, 2052,
         'rooftop_ASHP-heat 2020 high'),
        (1, 7, 6, 1, 1, 0, 3.40, 102.78, 1.47, 15, 2020, 2052,
         'rooftop_ASHP-heat 2020 high'),
        (2, 1, 4, 1, 1, 0.0173, 3.40, 545.83, 3.13, 25, 2003, 2052,
         'comm_GSHP-heat 2003 installed base'),
        (2, 1, 5, 1, 1, 0.0262, 3.40, 545.83, 3.13, 25, 2003, 2052,
         'comm_GSHP-heat 2003 installed base'),
        (2, 1, 6, 1, 1, 0.0086, 3.40, 545.83, 3.13, 25, 2003, 2052,
         'comm_GSHP-heat 2003 installed base'),
        (2, 2, 4, 1, 1, 0, 3.50, 545.83, 3.13, 25, 2003, 2052,
         'comm_GSHP-heat 2012 installed base'),
        (2, 2, 5, 1, 1, 0, 3.50, 545.83, 3.13, 25, 2003, 2052,
         'comm_GSHP-heat 2012 installed base'),
        (2, 2, 6, 1, 1, 0, 3.50, 545.83, 3.13, 25, 2003, 2052,
         'comm_GSHP-heat 2012 installed base'),
        (2, 3, 4, 1, 1, 0, 3.60, 514.58, 3.13, 25, 2003, 2052,
         'comm_GSHP-heat 2013 typical'),
        (2, 3, 5, 1, 1, 0, 3.60, 514.58, 3.13, 25, 2003, 2052,
         'comm_GSHP-heat 2013 typical'),
        (2, 3, 6, 1, 1, 0, 3.60, 514.58, 3.13, 25, 2003, 2052,
         'comm_GSHP-heat 2013 typical'),
        (2, 4, 4, 1, 1, 0, 3.70, 530.21, 3.13, 25, 2003, 2052,
         'comm_GSHP-heat 2013 mid'),
        (2, 4, 5, 1, 1, 0, 3.70, 530.21, 3.13, 25, 2003, 2052,
         'comm_GSHP-heat 2013 mid'),
        (2, 4, 6, 1, 1, 0, 3.70, 530.21, 3.13, 25, 2003, 2052,
         'comm_GSHP-heat 2013 mid'),
        (2, 5, 4, 1, 1, 0, 4.00, 571.88, 3.13, 25, 2003, 2052,
         'comm_GSHP-heat 2013 high'),
        (2, 5, 5, 1, 1, 0, 4.00, 571.88, 3.13, 25, 2003, 2052,
         'comm_GSHP-heat 2013 high'),
        (2, 5, 6, 1, 1, 0, 4.00, 571.88, 3.13, 25, 2003, 2052,
         'comm_GSHP-heat 2013 high'),
        (2, 6, 4, 1, 1, 0, 3.80, 514.58, 3.13, 25, 2020, 2052,
         'comm_GSHP-heat 2020 typical'),
        (2, 6, 5, 1, 1, 0, 3.80, 514.58, 3.13, 25, 2020, 2052,
         'comm_GSHP-heat 2020 typical'),
        (2, 6, 6, 1, 1, 0, 3.80, 514.58, 3.13, 25, 2020, 2052,
         'comm_GSHP-heat 2020 typical'),
        (2, 7, 4, 1, 1, 0, 4.20, 571.88, 3.13, 25, 2020, 2052,
         'comm_GSHP-heat 2020 high'),
        (2, 7, 5, 1, 1, 0, 4.20, 571.88, 3.13, 25, 2020, 2052,
         'comm_GSHP-heat 2020 high'),
        (2, 7, 6, 1, 1, 0, 4.20, 571.88, 3.13, 25, 2020, 2052,
         'comm_GSHP-heat 2020 high'),
        (2, 10, 4, 1, 1, 0, 3.60, 514.58, 3.13, 25, 2008, 2016,
         'comm_GSHP-heat 2013 typ 10% ITC w MACRS'),
        (2, 10, 5, 1, 1, 0, 3.60, 514.58, 3.13, 25, 2008, 2016,
         'comm_GSHP-heat 2013 typ 10% ITC w MACRS'),
        (2, 10, 6, 1, 1, 0, 3.60, 514.58, 3.13, 25, 2008, 2016,
         'comm_GSHP-heat 2013 typ 10% ITC w MACRS'),
        (2, 11, 4, 1, 1, 0, 3.70, 530.21, 3.13, 25, 2008, 2016,
         'comm_GSHP-heat 2013 mid 10% ITC w MACRS'),
        (2, 11, 5, 1, 1, 0, 3.70, 530.21, 3.13, 25, 2008, 2016,
         'comm_GSHP-heat 2013 mid 10% ITC w MACRS'),
        (2, 11, 6, 1, 1, 0, 3.70, 530.21, 3.13, 25, 2008, 2016,
         'comm_GSHP-heat 2013 mid 10% ITC w MACRS'),
        (2, 12, 4, 1, 1, 0, 4.00, 571.88, 3.13, 25, 2008, 2016,
         'comm_GSHP-heat 2013 high 10% ITC w MACRS'),
        (2, 12, 5, 1, 1, 0, 4.00, 571.88, 3.13, 25, 2008, 2016,
         'comm_GSHP-heat 2013 high 10% ITC w MACRS'),
        (2, 12, 6, 1, 1, 0, 4.00, 571.88, 3.13, 25, 2008, 2016,
         'comm_GSHP-heat 2013 high 10% ITC w MACRS'),
        (46, 1, 4, 1, 1, 0.0809, 0.94, 16.68, 0.26, 15, 2003, 2052,
         'elec_boiler 2003 installed base'),
        (46, 1, 5, 1, 1, 0.0903, 0.94, 16.68, 0.26, 15, 2003, 2052,
         'elec_boiler 2003 installed base'),
        (46, 1, 6, 1, 1, 0.0356, 0.94, 16.68, 0.26, 15, 2003, 2052,
         'elec_boiler 2003 installed base'),
        (46, 2, 4, 1, 1, 0, 0.94, 21.13, 0.26, 15, 2012, 2052,
         'elec_boiler 2012 installed base'),
        (46, 2, 5, 1, 1, 0, 0.94, 21.13, 0.26, 15, 2012, 2052,
         'elec_boiler 2012 installed base'),
        (46, 2, 6, 1, 1, 0, 0.94, 21.13, 0.26, 15, 2012, 2052,
         'elec_boiler 2012 installed base'),
        (31, 1, 8, 4, 1, 0.7990, 0.37, 4798.93, 32.65, 20, 2003, 2003,
         'CAV_Vent 2003 installed base'),
        (31, 1, 9, 4, 1, 0.8629, 0.37, 4798.93, 32.65, 20, 2003, 2003,
         'CAV_Vent 2003 installed base'),
        (31, 1, 10, 4, 1, 0.8617, 0.37, 4798.93, 32.65, 20, 2003, 2003,
         'CAV_Vent 2003 installed base'),
        (31, 2, 8, 4, 1, 0.0000, 0.38, 5061.56, 34.43, 20, 2004, 2052,
         'CAV_Vent 2007 installed base'),
        (31, 2, 9, 4, 1, 0.0000, 0.38, 5061.56, 34.43, 20, 2004, 2052,
         'CAV_Vent 2007 installed base'),
        (31, 2, 10, 4, 1, 0.0000, 0.38, 5061.56, 34.43, 20, 2004, 2052,
         'CAV_Vent 2007 installed base'),
        (31, 3, 8, 4, 1, 0.0000, 0.41, 5061.56, 34.43, 20, 2011, 2052,
         'CAV_Vent 2011 minimum'),
        (31, 3, 9, 4, 1, 0.0000, 0.41, 5061.56, 34.43, 20, 2011, 2052,
         'CAV_Vent 2011 minimum'),
        (31, 3, 10, 4, 1, 0.0000, 0.41, 5061.56, 34.43, 20, 2011, 2052,
         'CAV_Vent 2011 minimum'),
        (31, 4, 8, 4, 1, 0.0000, 0.43, 5061.56, 34.43, 20, 2011, 2052,
         'CAV_Vent 2011 typical'),
        (31, 4, 9, 4, 1, 0.0000, 0.43, 5061.56, 34.43, 20, 2011, 2052,
         'CAV_Vent 2011 typical'),
        (31, 4, 10, 4, 1, 0.0000, 0.43, 5061.56, 34.43, 20, 2011, 2052,
         'CAV_Vent 2011 typical'),
        (31, 5, 8, 4, 1, 0.0000, 0.48, 5509.18, 34.43, 20, 2011, 2052,
         'CAV_Vent 2011 high'),
        (31, 5, 9, 4, 1, 0.0000, 0.48, 5509.18, 34.43, 20, 2011, 2052,
         'CAV_Vent 2011 high'),
        (31, 5, 10, 4, 1, 0.0000, 0.48, 5509.18, 34.43, 20, 2011, 2052,
         'CAV_Vent 2011 high'),
        (31, 10, 8, 4, 1, 0.0000, 0.51, 5061.56, 34.43, 20, 2020, 2052,
         'CAV_Vent 2020 typical'),
        (31, 10, 9, 4, 1, 0.0000, 0.51, 5061.56, 34.43, 20, 2020, 2052,
         'CAV_Vent 2020 typical'),
        (31, 10, 10, 4, 1, 0.0000, 0.51, 5061.56, 34.43, 20, 2020, 2052,
         'CAV_Vent 2020 typical'),
        (31, 11, 8, 4, 1, 0.0000, 0.58, 5509.18, 34.43, 20, 2020, 2052,
         'CAV_Vent 2020 high'),
        (31, 11, 9, 4, 1, 0.0000, 0.58, 5509.18, 34.43, 20, 2020, 2052,
         'CAV_Vent 2020 high'),
        (31, 11, 10, 4, 1, 0.0000, 0.58, 5509.18, 34.43, 20, 2020, 2052,
         'CAV_Vent 2020 high'),
        (32, 1, 8, 4, 1, 0.2010, 1.15, 6266.69, 18.94, 20, 2003, 2003,
         'VAV_Vent 20003 installed base'),
        (32, 1, 9, 4, 1, 0.1371, 1.15, 6266.69, 18.94, 20, 2003, 2003,
         'VAV_Vent 20003 installed base'),
        (32, 1, 10, 4, 1, 0.1383, 1.15, 6266.69, 18.94, 20, 2003, 2003,
         'VAV_Vent 20003 installed base'),
        (32, 2, 8, 4, 1, 0.0000, 1.26, 6266.69, 18.94, 20, 2004, 2052,
         'VAV_Vent 2007 installed base'),
        (32, 2, 9, 4, 1, 0.0000, 1.26, 6266.69, 18.94, 20, 2004, 2052,
         'VAV_Vent 2007 installed base'),
        (32, 2, 10, 4, 1, 0.0000, 1.26, 6266.69, 18.94, 20, 2004, 2052,
         'VAV_Vent 2007 installed base'),
        (32, 3, 8, 4, 1, 0.0000, 1.28, 6266.69, 18.94, 20, 2011, 2052,
         'VAV_Vent 2011 minimum'),
        (32, 3, 9, 4, 1, 0.0000, 1.28, 6266.69, 18.94, 20, 2011, 2052,
         'VAV_Vent 2011 minimum'),
        (32, 3, 10, 4, 1, 0.0000, 1.28, 6266.69, 18.94, 20, 2011, 2052,
         'VAV_Vent 2011 minimum'),
        (32, 4, 8, 4, 1, 0.0000, 1.34, 6266.69, 18.94, 20, 2011, 2052,
         'VAV_Vent 2011 typical'),
        (32, 4, 9, 4, 1, 0.0000, 1.34, 6266.69, 18.94, 20, 2011, 2052,
         'VAV_Vent 2011 typical'),
        (32, 4, 10, 4, 1, 0.0000, 1.34, 6266.69, 18.94, 20, 2011, 2052,
         'VAV_Vent 2011 typical'),
        (32, 5, 8, 4, 1, 0.0000, 1.50, 6886.47, 18.94, 20, 2011, 2052,
         'VAV_Vent 2011 high'),
        (32, 5, 9, 4, 1, 0.0000, 1.50, 6886.47, 18.94, 20, 2011, 2052,
         'VAV_Vent 2011 high'),
        (32, 5, 10, 4, 1, 0.0000, 1.50, 6886.47, 18.94, 20, 2011, 2052,
         'VAV_Vent 2011 high'),
        (32, 10, 8, 4, 1, 0.0000, 1.59, 6266.69, 18.94, 20, 2020, 2052,
         'VAV_Vent 2020 typical'),
        (32, 10, 9, 4, 1, 0.0000, 1.59, 6266.69, 18.94, 20, 2020, 2052,
         'VAV_Vent 2020 typical'),
        (32, 10, 10, 4, 1, 0.0000, 1.59, 6266.69, 18.94, 20, 2020, 2052,
         'VAV_Vent 2020 typical'),
        (32, 11, 8, 4, 1, 0.0000, 1.82, 6886.47, 18.94, 20, 2020, 2052,
         'VAV_Vent 2020 high'),
        (32, 11, 9, 4, 1, 0.0000, 1.82, 6886.47, 18.94, 20, 2020, 2052,
         'VAV_Vent 2020 high'),
        (32, 11, 10, 4, 1, 0.0000, 1.82, 6886.47, 18.94, 20, 2020, 2052,
         'VAV_Vent 2020 high'),
        (24, 7, 9, 6, 1, 0.0000, 42.4, 84.67, 0.90, 15, 2011, 2052,
         '23W CFL 2011 typical'),
        (24, 7, 10, 6, 1, 0.0000, 42.4, 84.67, 0.90, 15, 2011, 2052,
         '23W CFL 2011 typical'),
        (24, 7, 11, 6, 1, 0.0000, 42.4, 84.67, 0.90, 15, 2011, 2052,
         '23W CFL 2011 typical'),
        (24, 8, 9, 6, 1, 0.0000, 44.6, 78.62, 0.86, 15, 2020, 2052,
         '23W CFL 2020 typical'),
        (24, 8, 10, 6, 1, 0.0000, 44.6, 78.62, 0.86, 15, 2020, 2052,
         '23W CFL 2020 typical'),
        (24, 8, 11, 6, 1, 0.0000, 44.6, 78.62, 0.86, 15, 2020, 2052,
         '23W CFL 2020 typical'),
        (24, 9, 9, 6, 1, 0.0000, 46.8, 73.01, 0.81, 15, 2030, 2052,
         '23W CFL 2030 typical'),
        (24, 9, 10, 6, 1, 0.0000, 46.8, 73.01, 0.81, 15, 2030, 2052,
         '23W CFL 2030 typical'),
        (24, 9, 11, 6, 1, 0.0000, 46.8, 73.01, 0.81, 15, 2030, 2052,
         '23W CFL 2030 typical'),
        (24, 15, 9, 6, 1, 0.0383, 13.5, 81.89, 8.34, 15, 2003, 2012,
         '90W Halogen PAR-38 2003 installed base'),
        (24, 15, 10, 6, 1, 0.1290, 13.5, 81.89, 8.34, 15, 2003, 2012,
         '90W Halogen PAR-38 2003 installed base'),
        (24, 15, 11, 6, 1, 0.0273, 13.5, 81.89, 8.34, 15, 2003, 2012,
         '90W Halogen PAR-38 2003 installed base'),
        (24, 16, 9, 6, 1, 0.0000, 13.5, 67.01, 7.05, 15, 2007, 2012,
         '90W Halogen PAR-38 2007 installed base'),
        (24, 16, 10, 6, 1, 0.0000, 13.5, 67.01, 7.05, 15, 2007, 2012,
         '90W Halogen PAR-38 2007 installed base'),
        (24, 16, 11, 6, 1, 0.0000, 13.5, 67.01, 7.05, 15, 2007, 2012,
         '90W Halogen PAR-38 2007 installed base'),
        (24, 17, 9, 6, 1, 0.0000, 13.7, 68.02, 5.49, 15, 2011, 2052,
         '90W Halogen PAR-38 2011 typical'),
        (24, 17, 10, 6, 1, 0.0000, 13.7, 68.02, 5.49, 15, 2011, 2052,
         '90W Halogen PAR-38 2011 typical'),
        (24, 17, 11, 6, 1, 0.0000, 13.7, 68.02, 5.49, 15, 2011, 2052,
         '90W Halogen PAR-38 2011 typical'),
        (24, 18, 9, 6, 1, 0.0000, 14.3, 64.17, 5.21, 15, 2020, 2052,
         '90W Halogen PAR-38 2020 typical'),
        (24, 18, 10, 6, 1, 0.0000, 14.3, 64.17, 5.21, 15, 2020, 2052,
         '90W Halogen PAR-38 2020 typical'),
        (24, 18, 11, 6, 1, 0.0000, 14.3, 64.17, 5.21, 15, 2020, 2052,
         '90W Halogen PAR-38 2020 typical'),
        (24, 20, 9, 6, 1, 0.0000, 16.7, 86.30, 9.10, 15, 2003, 2012,
         '70W HIR PAR-38 2003 installed base'),
        (24, 20, 10, 6, 1, 0.0000, 16.7, 86.30, 9.10, 15, 2003, 2012,
         '70W HIR PAR-38 2003 installed base'),
        (24, 20, 11, 6, 1, 0.0000, 16.7, 86.30, 9.10, 15, 2003, 2012,
         '70W HIR PAR-38 2003 installed base'),
        (24, 21, 9, 6, 1, 0.0000, 16.7, 70.63, 7.64, 15, 2007, 2012,
         '70W HIR PAR-38 2007 installed base'),
        (24, 21, 10, 6, 1, 0.0000, 16.7, 70.63, 7.64, 15, 2007, 2012,
         '70W HIR PAR-38 2007 installed base'),
        (24, 21, 11, 6, 1, 0.0000, 16.7, 70.63, 7.64, 15, 2007, 2012,
         '70W HIR PAR-38 2007 installed base'),
        (24, 22, 9, 6, 1, 0.0000, 18.7, 73.56, 12.04, 15, 2011, 2052,
         '70W HIR PAR-38 2011 typical'),
        (24, 22, 10, 6, 1, 0.0000, 18.7, 73.56, 12.04, 15, 2011, 2052,
         '70W HIR PAR-38 2011 typical'),
        (24, 22, 11, 6, 1, 0.0000, 18.7, 73.56, 12.04, 15, 2011, 2052,
         '70W HIR PAR-38 2011 typical'),
        (24, 23, 9, 6, 1, 0.0000, 19.6, 69.32, 11.40, 15, 2020, 2052,
         '70W HIR PAR-38 2020 typical'),
        (24, 23, 10, 6, 1, 0.0000, 19.6, 69.32, 11.40, 15, 2020, 2052,
         '70W HIR PAR-38 2020 typical'),
        (24, 23, 11, 6, 1, 0.0000, 19.6, 69.32, 11.40, 15, 2020, 2052,
         '70W HIR PAR-38 2020 typical'),
        (24, 25, 9, 6, 1, 0.0000, 15.1, 509.77, 27.52, 15, 2003, 2019,
         'LED Edison 2003 installed base'),
        (24, 25, 10, 6, 1, 0.0000, 15.1, 509.77, 27.52, 15, 2003, 2019,
         'LED Edison 2003 installed base'),
        (24, 25, 11, 6, 1, 0.0000, 15.1, 509.77, 27.52, 15, 2003, 2019,
         'LED Edison 2003 installed base'),
        (24, 26, 9, 6, 1, 0.0000, 51.0, 296.81, 28.71, 15, 2007, 2052,
         'LED Edison 2007 installed base'),
        (24, 26, 10, 6, 1, 0.0000, 51.0, 296.81, 28.71, 15, 2007, 2052,
         'LED Edison 2007 installed base'),
        (24, 26, 11, 6, 1, 0.0000, 51.0, 296.81, 28.71, 15, 2007, 2052,
         'LED Edison 2007 installed base'),
        (24, 27, 9, 6, 1, 0.0000, 60.0, 167.69, 5.69, 15, 2011, 2052,
         'LED Edison 2011 typical'),
        (24, 27, 10, 6, 1, 0.0000, 60.0, 167.69, 5.69, 15, 2011, 2052,
         'LED Edison 2011 typical'),
        (24, 27, 11, 6, 1, 0.0000, 60.0, 167.69, 5.69, 15, 2011, 2052,
         'LED Edison 2011 typical'),
        (24, 28, 9, 6, 1, 0.0000, 170.0, 105.71, 1.04, 15, 2020, 2052,
         'LED Edison 2020 typical'),
        (24, 28, 10, 6, 1, 0.0000, 170.0, 105.71, 1.04, 15, 2020, 2052,
         'LED Edison 2020 typical'),
        (24, 28, 11, 6, 1, 0.0000, 170.0, 105.71, 1.04, 15, 2020, 2052,
         'LED Edison 2020 typical'),
        (24, 29, 9, 6, 1, 0.0000, 202.0, 98.48, 0.72, 15, 2030, 2052,
         'LED Edison 2030 typical'),
        (24, 29, 10, 6, 1, 0.0000, 202.0, 98.48, 0.72, 15, 2030, 2052,
         'LED Edison 2030 typical'),
        (24, 29, 11, 6, 1, 0.0000, 202.0, 98.48, 0.72, 15, 2030, 2052,
         'LED Edison 2030 typical'),
        (25, 1, 9, 6, 1, 0.0364, 41.6, 19.77, 1.45, 15, 2003, 2005,
         'F34T12'),
        (25, 1, 10, 6, 1, 0.0288, 41.6, 19.77, 1.45, 15, 2003, 2005,
         'F34T12'),
        (25, 1, 11, 6, 1, 0.0286, 41.6, 19.77, 1.45, 15, 2003, 2005,
         'F34T12'),
        (25, 2, 9, 6, 1, 0.1090, 59.0, 31.11, 0.84, 15, 2003, 2052,
         'T8 F32 EEMag (e)'),
        (25, 2, 10, 6, 1, 0.0864, 59.0, 31.11, 0.84, 15, 2003, 2052,
         'T8 F32 EEMag (e)'),
        (25, 2, 11, 6, 1, 0.0856, 59.0, 31.11, 0.84, 15, 2003, 2052,
         'T8 F32 EEMag (e)'),
        (25, 9, 9, 6, 1, 0.0074, 151.1, 24.68, 1.61, 15, 2003, 2012,
         'F28T8 HE w/ OS 2011 typical'),
        (25, 9, 10, 6, 1, 0.0007, 151.1, 24.68, 1.61, 15, 2003, 2012,
         'F28T8 HE w/ OS 2011 typical'),
        (25, 9, 11, 6, 1, 0.0238, 151.1, 24.68, 1.61, 15, 2003, 2012,
         'F28T8 HE w/ OS 2011 typical'),
        (25, 10, 9, 6, 1, 0.0000, 162.5, 24.08, 1.58, 15, 2020, 2029,
         'F28T8 HE w/ OS 2020 typical'),
        (25, 10, 10, 6, 1, 0.0000, 162.5, 24.08, 1.58, 15, 2020, 2029,
         'F28T8 HE w/ OS 2020 typical'),
        (25, 10, 11, 6, 1, 0.0000, 162.5, 24.08, 1.58, 15, 2020, 2029,
         'F28T8 HE w/ OS 2020 typical'),
        (25, 11, 9, 6, 1, 0.0000, 165.2, 23.43, 1.54, 15, 2030, 2052,
         'F28T8 HE w/ OS 2030 typical'),
        (25, 11, 10, 6, 1, 0.0000, 165.2, 23.43, 1.54, 15, 2030, 2052,
         'F28T8 HE w/ OS 2030 typical'),
        (25, 11, 11, 6, 1, 0.0000, 165.2, 23.43, 1.54, 15, 2030, 2052,
         'F28T8 HE w/ OS 2030 typical')],
        dtype=[('t', 'i4'), ('v', 'i4'), ('r', 'i4'), ('s', 'i4'), ('f', 'i4'),
               ('Shr', 'f8'), ('eff', 'f8'), ('c1', 'f8'), ('c2', 'f8'),
               ('Life', 'i4'), ('y1', 'i4'), ('y2', 'i4'),
               ('technology name', '<U50')])

    # Define an array of service demand data that are needed to
    # process the technology cost, performance, and lifetime data
    # (note that the year data beyond 2020 were removed and some of
    # the technology performance levels that appear here do not have
    # corresponding cost/performance/lifetime data)
    sd_data = np.array([
        (4, 6, 1, 1, 1, 1,  1, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         "rooftop_ASHP-heat 2003 installed base", 3.10),
        (4, 6, 1, 1, 2, 1,  1, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         "rooftop_ASHP-heat 2003 installed base", 3.10),
        (4, 6, 1, 1, 3, 1,  1, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         "rooftop_ASHP-heat 2003 installed base", 3.10),
        (4, 6, 1, 1, 1, 1,  2, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         "rooftop_ASHP-heat 2012 installed base", 3.25),
        (4, 6, 1, 1, 2, 1,  2, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         "rooftop_ASHP-heat 2012 installed base", 3.25),
        (4, 6, 1, 1, 3, 1,  2, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         "rooftop_ASHP-heat 2012 installed base", 3.25),
        (4, 6, 1, 1, 1, 1,  3, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         "rooftop_ASHP-heat 2013 current standard/ typ", 3.30),
        (4, 6, 1, 1, 2, 1,  3, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         "rooftop_ASHP-heat 2013 current standard/ typ", 3.30),
        (4, 6, 1, 1, 3, 1,  3, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         "rooftop_ASHP-heat 2013 current standard/ typ", 3.30),
        (4, 6, 1, 1, 1, 1,  4, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         "rooftop_ASHP-heat 2013 ENERGY STAR", 3.35),
        (4, 6, 1, 1, 2, 1,  4, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         "rooftop_ASHP-heat 2013 ENERGY STAR", 3.35),
        (4, 6, 1, 1, 3, 1,  4, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         "rooftop_ASHP-heat 2013 ENERGY STAR", 3.35),
        (4, 6, 1, 1, 1, 1,  5, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         "rooftop_ASHP-heat 2013 high", 3.40),
        (4, 6, 1, 1, 2, 1,  5, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         "rooftop_ASHP-heat 2013 high", 3.40),
        (4, 6, 1, 1, 3, 1,  5, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         "rooftop_ASHP-heat 2013 high", 3.40),
        (4, 6, 1, 1, 1, 1,  6, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         "rooftop_ASHP-heat 2020 typical", 3.30),
        (4, 6, 1, 1, 2, 1,  6, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         "rooftop_ASHP-heat 2020 typical", 3.30),
        (4, 6, 1, 1, 3, 1,  6, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         "rooftop_ASHP-heat 2020 typical", 3.30),
        (4, 6, 1, 1, 1, 1,  7, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         "rooftop_ASHP-heat 2020 high", 3.40),
        (4, 6, 1, 1, 2, 1,  7, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         "rooftop_ASHP-heat 2020 high", 3.40),
        (4, 6, 1, 1, 3, 1,  7, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         "rooftop_ASHP-heat 2020 high", 3.40),
        (4, 6, 1, 1, 1, 2,  1, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         "comm_GSHP-heat 2003 installed base", 3.40),
        (4, 6, 1, 1, 2, 2,  1, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         "comm_GSHP-heat 2003 installed base", 3.40),
        (4, 6, 1, 1, 3, 2,  1, 0.317, 0.299, 0.283, 0.268, 0.253, 0.239, 0.226,
         0.214, 0.202, 0.190, 0.180, 0.169, 0.160, 0.151, 0.142, 0.134, 0.127,
         "comm_GSHP-heat 2003 installed base", 3.40),
        (4, 6, 1, 1, 1, 2,  2, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         "comm_GSHP-heat 2012 installed base", 3.50),
        (4, 6, 1, 1, 2, 2,  2, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         "comm_GSHP-heat 2012 installed base", 3.50),
        (4, 6, 1, 1, 3, 2,  2, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         "comm_GSHP-heat 2012 installed base", 3.50),
        (4, 6, 1, 1, 1, 2,  3, 0.003, 0.003, 0.003, 0.003, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.001, 0.001, 0.001, 0.000,
         "comm_GSHP-heat 2013 typical", 3.60),
        (4, 6, 1, 1, 2, 2,  3, 0.009, 0.009, 0.009, 0.009, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.007, 0.007, 0.007, 0.000,
         "comm_GSHP-heat 2013 typical", 3.60),
        (4, 6, 1, 1, 3, 2,  3, 0.000, 0.011, 0.022, 0.032, 0.041, 0.039, 0.037,
         0.035, 0.033, 0.031, 0.029, 0.028, 0.026, 0.025, 0.031, 0.037, 0.043,
         "comm_GSHP-heat 2013 typical", 3.60),
        (4, 6, 1, 1, 1, 2,  4, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         "comm_GSHP-heat 2013 mid", 3.70),
        (4, 6, 1, 1, 2, 2,  4, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         "comm_GSHP-heat 2013 mid", 3.70),
        (4, 6, 1, 1, 3, 2,  4, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         "comm_GSHP-heat 2013 mid", 3.70),
        (4, 6, 1, 1, 1, 2,  5, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         "comm_GSHP-heat 2013 high", 4.00),
        (4, 6, 1, 1, 2, 2,  5, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         "comm_GSHP-heat 2013 high", 4.00),
        (4, 6, 1, 1, 3, 2,  5, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         "comm_GSHP-heat 2013 high", 4.00),
        (4, 6, 1, 1, 1, 2,  6, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.001,
         "comm_GSHP-heat 2020 typical", 3.80),
        (4, 6, 1, 1, 2, 2,  6, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.007,
         "comm_GSHP-heat 2020 typical", 3.80),
        (4, 6, 1, 1, 3, 2,  6, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         "comm_GSHP-heat 2020 typical", 3.80),
        (4, 6, 1, 1, 1, 2,  7, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         "comm_GSHP-heat 2020 high", 4.20),
        (4, 6, 1, 1, 2, 2,  7, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         "comm_GSHP-heat 2020 high", 4.20),
        (4, 6, 1, 1, 3, 2,  7, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         "comm_GSHP-heat 2020 high", 4.20),
        (4, 6, 1, 1, 1, 2, 10, 0.000, 0.000, 0.000, 0.000, 0.003, 0.003, 0.002,
         0.002, 0.001, 0.002, 0.001, 0.001, 0.001, 0.000, 0.000, 0.000, 0.000,
         "comm_GSHP-heat 2013 typ 10% ITC w MACRS", 3.60),
        (4, 6, 1, 1, 2, 2, 10, 0.000, 0.000, 0.000, 0.000, 0.009, 0.009, 0.008,
         0.008, 0.008, 0.008, 0.008, 0.007, 0.007, 0.000, 0.000, 0.000, 0.000,
         "comm_GSHP-heat 2013 typ 10% ITC w MACRS", 3.60),
        (4, 6, 1, 1, 3, 2, 10, 0.000, 0.000, 0.000, 0.000, 0.000, 0.011, 0.021,
         0.030, 0.037, 0.044, 0.050, 0.056, 0.061, 0.066, 0.062, 0.059, 0.055,
         "comm_GSHP-heat 2013 typ 10% ITC w MACRS", 3.60),
        (4, 6, 1, 1, 1, 2, 11, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         "comm_GSHP-heat 2013 mid 10% ITC w MACRS", 3.70),
        (4, 6, 1, 1, 2, 2, 11, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         "comm_GSHP-heat 2013 mid 10% ITC w MACRS", 3.70),
        (4, 6, 1, 1, 3, 2, 11, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         "comm_GSHP-heat 2013 mid 10% ITC w MACRS", 3.70),
        (4, 6, 1, 1, 1, 2, 12, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         "comm_GSHP-heat 2013 high 10% ITC w MACRS", 4.00),
        (4, 6, 1, 1, 2, 2, 12, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         "comm_GSHP-heat 2013 high 10% ITC w MACRS", 4.00),
        (4, 6, 1, 1, 3, 2, 12, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         "comm_GSHP-heat 2013 high 10% ITC w MACRS", 4.00),
        (4, 6, 1, 1, 1, 46, 1, 0.054, 0.056, 0.061, 0.075, 0.075, 0.057, 0.043,
         0.037, 0.028, 0.041, 0.039, 0.041, 0.041, 0.043, 0.043, 0.046, 0.047,
         "elec_boiler 2003 installed base", 0.94),
        (4, 6, 1, 1, 2, 46, 1, 0.111, 0.115, 0.118, 0.121, 0.119, 0.123, 0.125,
         0.126, 0.127, 0.127, 0.130, 0.131, 0.132, 0.133, 0.140, 0.135, 0.136,
         "elec_boiler 2003 installed base", 0.94),
        (4, 6, 1, 1, 3, 46, 1, 1.149, 1.208, 1.267, 1.330, 1.403, 1.468, 1.512,
         1.544, 1.567, 1.580, 1.604, 1.627, 1.651, 1.673, 1.696, 1.723, 1.746,
         "elec_boiler 2003 installed base", 0.94),
        (4, 6, 1, 1, 1, 46, 2, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         "elec_boiler 2012 installed base", 0.94),
        (4, 6, 1, 1, 2, 46, 2, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         "elec_boiler 2012 installed base", 0.94),
        (4, 6, 1, 1, 3, 46, 2, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         "elec_boiler 2012 installed base", 0.94),
        (2, 8, 4, 1, 1, 31, 1, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         "CAV_Vent 2003 installed base", 0.37),
        (2, 8, 4, 1, 2, 31, 1, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         "CAV_Vent 2003 installed base", 0.37),
        (2, 8, 4, 1, 3, 31, 1, 0.991, 0.929, 0.871, 0.816, 0.765, 0.717, 0.673,
         0.631, 0.591, 0.554, 0.520, 0.487, 0.457, 0.428, 0.402, 0.377, 0.353,
         "CAV_Vent 2003 installed base", 0.37),
        (2, 8, 4, 1, 1, 31, 2, 0.018, 0.019, 0.016, 0.019, 0.018, 0.016, 0.012,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         "CAV_Vent 2007 installed base", 0.38),
        (2, 8, 4, 1, 2, 31, 2, 0.054, 0.055, 0.051, 0.051, 0.050, 0.050, 0.050,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         "CAV_Vent 2007 installed base", 0.38),
        (2, 8, 4, 1, 3, 31, 2, 0.000, 0.068, 0.132, 0.187, 0.240, 0.289, 0.333,
         0.370, 0.347, 0.325, 0.305, 0.286, 0.268, 0.251, 0.236, 0.221, 0.207,
         "CAV_Vent 2007 installed base", 0.38),
        (2, 8, 4, 1, 1, 31, 3, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         "CAV_Vent 2011 minimum", 0.41),
        (2, 8, 4, 1, 2, 31, 3, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         "CAV_Vent 2011 minimum", 0.41),
        (2, 8, 4, 1, 3, 31, 3, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         "CAV_Vent 2011 minimum", 0.41),
        (2, 8, 4, 1, 1, 31, 4, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.011, 0.011, 0.011, 0.014, 0.016, 0.018, 0.020, 0.021, 0.022, 0.000,
         "CAV_Vent 2011 typical", 0.43),
        (2, 8, 4, 1, 2, 31, 4, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.049, 0.048, 0.048, 0.054, 0.054, 0.054, 0.055, 0.055, 0.056, 0.000,
         "CAV_Vent 2011 typical", 0.43),
        (2, 8, 4, 1, 3, 31, 4, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.056, 0.108, 0.157, 0.211, 0.264, 0.316, 0.366, 0.415, 0.462,
         "CAV_Vent 2011 typical", 0.43),
        (2, 8, 4, 1, 1, 31, 5, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         "CAV_Vent 2011 high", 0.48),
        (2, 8, 4, 1, 2, 31, 5, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.001, 0.001, 0.001, 0.001, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         "CAV_Vent 2011 high", 0.48),
        (2, 8, 4, 1, 3, 31, 5, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.001, 0.002, 0.004, 0.004, 0.004, 0.004, 0.004, 0.004, 0.003,
         "CAV_Vent 2011 high", 0.48),
        (2, 8, 4, 1, 1, 31, 6, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.023,
         "CAV_Vent 2020 typical", 0.45),
        (2, 8, 4, 1, 2, 31, 6, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.056,
         "CAV_Vent 2020 typical", 0.45),
        (2, 8, 4, 1, 3, 31, 6, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         "CAV_Vent 2020 typical", 0.45),
        (2, 8, 4, 1, 1, 31, 7, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         "CAV_Vent 2020 high", 0.51),
        (2, 8, 4, 1, 2, 31, 7, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         "CAV_Vent 2020 high", 0.51),
        (2, 8, 4, 1, 3, 31, 7, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         "CAV_Vent 2020 high", 0.51),
        (2, 8, 4, 1, 1, 32, 1, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         "VAV_Vent 20003 installed base", 1.15),
        (2, 8, 4, 1, 2, 32, 1, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         "VAV_Vent 20003 installed base", 1.15),
        (2, 8, 4, 1, 3, 32, 1, 0.249, 0.234, 0.219, 0.205, 0.192, 0.180, 0.169,
         0.159, 0.149, 0.139, 0.131, 0.123, 0.115, 0.108, 0.101, 0.095, 0.089,
         "VAV_Vent 20003 installed base", 1.15),
        (2, 8, 4, 1, 1, 32, 2, 0.003, 0.003, 0.005, 0.006, 0.006, 0.006, 0.004,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         "VAV_Vent 2007 installed base", 1.26),
        (2, 8, 4, 1, 2, 32, 2, 0.011, 0.011, 0.015, 0.015, 0.016, 0.016, 0.017,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         "VAV_Vent 2007 installed base", 1.26),
        (2, 8, 4, 1, 3, 32, 2, 0.000, 0.013, 0.026, 0.043, 0.059, 0.077, 0.092,
         0.106, 0.099, 0.093, 0.087, 0.082, 0.077, 0.072, 0.068, 0.063, 0.059,
         "VAV_Vent 2007 installed base", 1.26),
        (2, 8, 4, 1, 1, 32, 3, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         "VAV_Vent 2011 minimum", 1.28),
        (2, 8, 4, 1, 2, 32, 3, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         "VAV_Vent 2011 minimum", 1.28),
        (2, 8, 4, 1, 3, 32, 3, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         "VAV_Vent 2011 minimum", 1.28),
        (2, 8, 4, 1, 1, 32, 4, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.004, 0.004, 0.004, 0.003, 0.003, 0.004, 0.004, 0.004, 0.004, 0.000,
         "VAV_Vent 2011 typical", 1.34),
        (2, 8, 4, 1, 2, 32, 4, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.017, 0.017, 0.017, 0.012, 0.012, 0.012, 0.012, 0.012, 0.012, 0.000,
         "VAV_Vent 2011 typical", 1.34),
        (2, 8, 4, 1, 3, 32, 4, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.020, 0.038, 0.056, 0.067, 0.077, 0.086, 0.096, 0.105, 0.113,
         "VAV_Vent 2011 typical", 1.34),
        (2, 8, 4, 1, 1, 32, 5, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         "VAV_Vent 2011 high", 1.50),
        (2, 8, 4, 1, 2, 32, 5, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         "VAV_Vent 2011 high", 1.50),
        (2, 8, 4, 1, 3, 32, 5, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         "VAV_Vent 2011 high", 1.50),
        (2, 8, 4, 1, 1, 32, 6, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.004,
         "VAV_Vent 2020 typical", 1.42),
        (2, 8, 4, 1, 2, 32, 6, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.012,
         "VAV_Vent 2020 typical", 1.42),
        (2, 8, 4, 1, 3, 32, 6, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         "VAV_Vent 2020 typical", 1.42),
        (2, 8, 4, 1, 1, 32, 7, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         "VAV_Vent 2020 high", 1.59),
        (2, 8, 4, 1, 2, 32, 7, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         "VAV_Vent 2020 high", 1.59),
        (2, 8, 4, 1, 3, 32, 7, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         "VAV_Vent 2020 high", 1.59),
        (9, 10, 6, 1, 1, 24, 7, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.001, 0.002, 0.002, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001,
         0.000, "23W CFL 2011 typical", 42.40),
        (9, 10, 6, 1, 2, 24, 7, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.004, 0.004, 0.004, 0.003, 0.003, 0.003, 0.003, 0.003, 0.003,
         0.000, "23W CFL 2011 typical", 42.40),
        (9, 10, 6, 1, 3, 24, 7, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.016, 0.035, 0.052, 0.065, 0.077, 0.088, 0.100, 0.111, 0.121,
         0.116, "23W CFL 2011 typical", 42.40),
        (9, 10, 6, 1, 1, 24, 8, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.009, "23W CFL 2020 typical", 44.56),
        (9, 10, 6, 1, 2, 24, 8, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.025, "23W CFL 2020 typical", 44.56),
        (9, 10, 6, 1, 3, 24, 8, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, "23W CFL 2020 typical", 44.56),
        (9, 10, 6, 1, 1, 24, 9, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, "23W CFL 2030 typical", 46.78),
        (9, 10, 6, 1, 2, 24, 9, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, "23W CFL 2030 typical", 46.78),
        (9, 10, 6, 1, 3, 24, 9, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, "23W CFL 2030 typical", 46.78),
        (9, 10, 6, 1, 1, 24, 15, 0.013, 0.014, 0.014, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, "90W Halogen PAR-38 2003 installed base", 13.50),
        (9, 10, 6, 1, 2, 24, 15, 0.026, 0.026, 0.027, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, "90W Halogen PAR-38 2003 installed base", 13.50),
        (9, 10, 6, 1, 3, 24, 15, 0.190, 0.212, 0.232, 0.252, 0.224, 0.199,
         0.173, 0.150, 0.131, 0.102, 0.091, 0.080, 0.071, 0.063, 0.056, 0.050,
         0.040, "90W Halogen PAR-38 2003 installed base", 13.50),
        (9, 10, 6, 1, 1, 24, 16, 0.000, 0.000, 0.000, 0.017, 0.016, 0.017,
         0.012, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, "90W Halogen PAR-38 2007 installed base", 13.50),
        (9, 10, 6, 1, 2, 24, 16, 0.000, 0.000, 0.000, 0.028, 0.028, 0.029,
         0.029, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, "90W Halogen PAR-38 2007 installed base", 13.50),
        (9, 10, 6, 1, 3, 24, 16, 0.000, 0.000, 0.000, 0.000, 0.039, 0.067,
         0.089, 0.102, 0.080, 0.063, 0.056, 0.049, 0.044, 0.039, 0.034, 0.030,
         0.025, "90W Halogen PAR-38 2007 installed base", 13.50),
        (9, 10, 6, 1, 1, 24, 17, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, "90W Halogen PAR-38 2011 typical", 13.70),
        (9, 10, 6, 1, 2, 24, 17, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, "90W Halogen PAR-38 2011 typical", 13.70),
        (9, 10, 6, 1, 3, 24, 17, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, "90W Halogen PAR-38 2011 typical", 13.70),
        (9, 10, 6, 1, 1, 24, 18, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, "90W Halogen PAR-38 2020 typical", 14.34),
        (9, 10, 6, 1, 2, 24, 18, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, "90W Halogen PAR-38 2020 typical", 14.34),
        (9, 10, 6, 1, 3, 24, 18, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, "90W Halogen PAR-38 2020 typical", 14.34),
        (9, 10, 6, 1, 1, 24, 20, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, "70W HIR PAR-38 2003 installed base", 16.70),
        (9, 10, 6, 1, 2, 24, 20, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, "70W HIR PAR-38 2003 installed base", 16.70),
        (9, 10, 6, 1, 3, 24, 20, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, "70W HIR PAR-38 2003 installed base", 16.70),
        (9, 10, 6, 1, 1, 24, 21, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, "70W HIR PAR-38 2007 installed base", 16.70),
        (9, 10, 6, 1, 2, 24, 21, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, "70W HIR PAR-38 2007 installed base", 16.70),
        (9, 10, 6, 1, 3, 24, 21, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, "70W HIR PAR-38 2007 installed base", 16.70),
        (9, 10, 6, 1, 1, 24, 22, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, "70W HIR PAR-38 2011 typical", 18.70),
        (9, 10, 6, 1, 2, 24, 22, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, "70W HIR PAR-38 2011 typical", 18.70),
        (9, 10, 6, 1, 3, 24, 22, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, "70W HIR PAR-38 2011 typical", 18.70),
        (9, 10, 6, 1, 1, 24, 23, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, "70W HIR PAR-38 2020 typical", 19.60),
        (9, 10, 6, 1, 2, 24, 23, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, "70W HIR PAR-38 2020 typical", 19.60),
        (9, 10, 6, 1, 3, 24, 23, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, "70W HIR PAR-38 2020 typical", 19.60),
        (9, 10, 6, 1, 1, 24, 25, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, "LED Edison 2003 installed base", 15.05),
        (9, 10, 6, 1, 2, 24, 25, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, "LED Edison 2003 installed base", 15.05),
        (9, 10, 6, 1, 3, 24, 25, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, "LED Edison 2003 installed base", 15.05),
        (9, 10, 6, 1, 1, 24, 26, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, "LED Edison 2007 installed base", 51.00),
        (9, 10, 6, 1, 2, 24, 26, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, "LED Edison 2007 installed base", 51.00),
        (9, 10, 6, 1, 3, 24, 26, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, "LED Edison 2007 installed base", 51.00),
        (9, 10, 6, 1, 1, 24, 27, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, "LED Edison 2011 typical", 60.00),
        (9, 10, 6, 1, 2, 24, 27, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, "LED Edison 2011 typical", 60.00),
        (9, 10, 6, 1, 3, 24, 27, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, "LED Edison 2011 typical", 60.00),
        (9, 10, 6, 1, 1, 24, 28, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.016, "LED Edison 2020 typical", 170.00),
        (9, 10, 6, 1, 2, 24, 28, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.042, "LED Edison 2020 typical", 170.00),
        (9, 10, 6, 1, 3, 24, 28, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.031, "LED Edison 2020 typical", 170.00),
        (9, 10, 6, 1, 1, 24, 29, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, "LED Edison 2030 typical", 202.00),
        (9, 10, 6, 1, 2, 24, 29, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, "LED Edison 2030 typical", 202.00),
        (9, 10, 6, 1, 3, 24, 29, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, "LED Edison 2030 typical", 202.00),
        (9, 10, 6, 1, 1, 25, 1, 0.049, 0.052, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, "F34T12", 41.60),
        (9, 10, 6, 1, 2, 25, 1, 0.098, 0.100, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, "F34T12", 41.60),
        (9, 10, 6, 1, 3, 25, 1, 0.029, 0.118, 0.182, 0.122, 0.077, 0.048,
         0.030, 0.018, 0.011, 0.007, 0.004, 0.003, 0.002, 0.001, 0.001, 0.000,
         0.000, "F34T12", 41.60),
        (9, 10, 6, 1, 1, 25, 2, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, "T8 F32 EEMag (e)", 59.00),
        (9, 10, 6, 1, 2, 25, 2, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, "T8 F32 EEMag (e)", 59.00),
        (9, 10, 6, 1, 3, 25, 2, 0.120, 0.111, 0.102, 0.094, 0.084, 0.075,
         0.066, 0.057, 0.049, 0.043, 0.038, 0.034, 0.030, 0.026, 0.024, 0.021,
         0.019, "T8 F32 EEMag (e)", 59.00),
        (9, 10, 6, 1, 1, 25, 9, 0.083, 0.088, 0.091, 0.106, 0.094, 0.100,
         0.069, 0.062, 0.082, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, "F28T8 HE w/ OS 2011 typical", 151.13),
        (9, 10, 6, 1, 2, 25, 9, 0.167, 0.170, 0.174, 0.178, 0.166, 0.172,
         0.171, 0.172, 0.174, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, "F28T8 HE w/ OS 2011 typical", 151.13),
        (9, 10, 6, 1, 3, 25, 9, 0.163, 0.381, 0.590, 0.789, 0.990, 1.155,
         1.318, 1.437, 1.543, 1.661, 1.534, 1.416, 1.307, 1.207, 1.114, 1.028,
         0.949, "F28T8 HE w/ OS 2011 typical", 151.13),
        (9, 10, 6, 1, 1, 25, 10, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.077, "F28T8 HE w/ OS 2020 typical", 162.49),
        (9, 10, 6, 1, 2, 25, 10, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.207, "F28T8 HE w/ OS 2020 typical", 162.49),
        (9, 10, 6, 1, 3, 25, 10, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, "F28T8 HE w/ OS 2020 typical", 162.49),
        (9, 10, 6, 1, 1, 25, 11, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, "F28T8 HE w/ OS 2030 typical", 165.16),
        (9, 10, 6, 1, 2, 25, 11, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, "F28T8 HE w/ OS 2030 typical", 165.16),
        (9, 10, 6, 1, 3, 25, 11, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, "F28T8 HE w/ OS 2030 typical", 165.16),
        (9, 10, 6, 1, 1, 25, 6, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, "F28T8 HE 2011 typical", 58.19),
        (9, 10, 6, 1, 2, 25, 6, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, "F28T8 HE 2011 typical", 58.19),
        (9, 10, 6, 1, 3, 25, 6, 0.661, 0.610, 0.563, 0.519, 0.460, 0.408,
         0.357, 0.309, 0.268, 0.233, 0.206, 0.183, 0.162, 0.144, 0.127, 0.113,
         0.100, "F28T8 HE 2011 typical", 58.19)],
        dtype=[('r', '<i4'), ('b', '<i4'), ('s', '<i4'), ('f', '<i4'),
               ('d', '<i4'), ('t', '<i4'), ('v', '<i4'), ('2004', '<f8'),
               ('2005', '<f8'), ('2006', '<f8'), ('2007', '<f8'),
               ('2008', '<f8'), ('2009', '<f8'), ('2010', '<f8'),
               ('2011', '<f8'), ('2012', '<f8'), ('2013', '<f8'),
               ('2014', '<f8'), ('2015', '<f8'), ('2016', '<f8'),
               ('2017', '<f8'), ('2018', '<f8'), ('2019', '<f8'),
               ('2020', '<f8'), ('Description', '<U50'), ('Eff', '<f8')])

    # Define a list of the microsegments converted to numeric indices
    # from the human-readable (i.e., words) category text in the
    # underlying empty JSON database that define what data should be
    # selected from the tech_data and sd_data arrays
    data_to_select = [[4, 6, 1, 1],
                      [4, 6, 1, 1],
                      [2, 8, 4, 1],
                      [9, 10, 6, 1]]
    # Note that the conversion from the category text to numbers isn't
    # tested here since the existing function is already tested separately

    # Define lists of strings for the cost and performance units of
    # each of the technologies in the data_to_select list
    cost_units = ['2013$/kBTU out/hr',
                  '2013$/kBTU out/hr',
                  '2013$/1000 cfm',
                  '2013$/1000 lm']
    perf_units = ['BTU out/BTU in',
                  'BTU out/BTU in',
                  'cfm-hr/BTU in',
                  'lm/W']

    # Define a list of numpy arrays that represent the data selected
    # from the tech_data array based on the data_to_select lists
    selected_tech_data = [
        np.array([
            (1, 1, 4, 1, 1, 0.015, 3.1, 67.78, 1.47, 15, 2003, 2009,
             'rooftop_ASHP-heat 2003 installed base'),
            (1, 2, 4, 1, 1, 0.0, 3.25, 81.39, 1.47, 15, 2003, 2009,
             'rooftop_ASHP-heat 2012 installed base'),
            (1, 3, 4, 1, 1, 0.0, 3.3, 81.39, 1.47, 15, 2003, 2052,
             'rooftop_ASHP-heat 2013 current standard/ typical'),
            (1, 4, 4, 1, 1, 0.0, 3.35, 83.61, 1.47, 15, 2003, 2052,
             'rooftop_ASHP-heat 2013 ENERGY STAR'),
            (1, 5, 4, 1, 1, 0.0, 3.4, 102.78, 1.47, 15, 2003, 2052,
             'rooftop_ASHP-heat 2013 high'),
            (1, 6, 4, 1, 1, 0.0, 3.3, 81.39, 1.47, 15, 2020, 2052,
             'rooftop_ASHP-heat 2020 typical'),
            (1, 7, 4, 1, 1, 0.0, 3.4, 102.78, 1.47, 15, 2020, 2052,
             'rooftop_ASHP-heat 2020 high'),
            (2, 1, 4, 1, 1, 0.0173, 3.4, 545.83, 3.13, 25, 2003, 2052,
             'comm_GSHP-heat 2003 installed base'),
            (2, 2, 4, 1, 1, 0.0, 3.5, 545.83, 3.13, 25, 2003, 2052,
             'comm_GSHP-heat 2012 installed base'),
            (2, 3, 4, 1, 1, 0.0, 3.6, 514.58, 3.13, 25, 2003, 2052,
             'comm_GSHP-heat 2013 typical'),
            (2, 4, 4, 1, 1, 0.0, 3.7, 530.21, 3.13, 25, 2003, 2052,
             'comm_GSHP-heat 2013 mid'),
            (2, 5, 4, 1, 1, 0.0, 4.0, 571.88, 3.13, 25, 2003, 2052,
             'comm_GSHP-heat 2013 high'),
            (2, 6, 4, 1, 1, 0.0, 3.8, 514.58, 3.13, 25, 2020, 2052,
             'comm_GSHP-heat 2020 typical'),
            (2, 7, 4, 1, 1, 0.0, 4.2, 571.88, 3.13, 25, 2020, 2052,
             'comm_GSHP-heat 2020 high'),
            (2, 10, 4, 1, 1, 0.0, 3.6, 514.58, 3.13, 25, 2008, 2016,
             'comm_GSHP-heat 2013 typ 10% ITC w MACRS'),
            (2, 11, 4, 1, 1, 0.0, 3.7, 530.21, 3.13, 25, 2008, 2016,
             'comm_GSHP-heat 2013 mid 10% ITC w MACRS'),
            (2, 12, 4, 1, 1, 0.0, 4.0, 571.88, 3.13, 25, 2008, 2016,
             'comm_GSHP-heat 2013 high 10% ITC w MACRS'),
            (46, 1, 4, 1, 1, 0.0809, 0.94, 16.68, 0.26, 15, 2003, 2052,
             'elec_boiler 2003 installed base'),
            (46, 2, 4, 1, 1, 0.0, 0.94, 21.13, 0.26, 15, 2012, 2052,
             'elec_boiler 2012 installed base')],
            dtype=[('t', 'i4'), ('v', 'i4'), ('r', 'i4'), ('s', 'i4'),
                   ('f', 'i4'), ('Shr', 'f8'), ('eff', 'f8'), ('c1', 'f8'),
                   ('c2', 'f8'), ('Life', 'i4'), ('y1', 'i4'), ('y2', 'i4'),
                   ('technology name', '<U50')]),
        np.array([
            (1, 1, 4, 1, 1, 0.015, 3.1, 67.78, 1.47, 15, 2003, 2009,
             'rooftop_ASHP-heat 2003 installed base'),
            (1, 2, 4, 1, 1, 0.0, 3.25, 81.39, 1.47, 15, 2003, 2009,
             'rooftop_ASHP-heat 2012 installed base'),
            (1, 3, 4, 1, 1, 0.0, 3.3, 81.39, 1.47, 15, 2003, 2052,
             'rooftop_ASHP-heat 2013 current standard/ typical'),
            (1, 4, 4, 1, 1, 0.0, 3.35, 83.61, 1.47, 15, 2003, 2052,
             'rooftop_ASHP-heat 2013 ENERGY STAR'),
            (1, 5, 4, 1, 1, 0.0, 3.4, 102.78, 1.47, 15, 2003, 2052,
             'rooftop_ASHP-heat 2013 high'),
            (1, 6, 4, 1, 1, 0.0, 3.3, 81.39, 1.47, 15, 2020, 2052,
             'rooftop_ASHP-heat 2020 typical'),
            (1, 7, 4, 1, 1, 0.0, 3.4, 102.78, 1.47, 15, 2020, 2052,
             'rooftop_ASHP-heat 2020 high'),
            (2, 1, 4, 1, 1, 0.0173, 3.4, 545.83, 3.13, 25, 2003, 2052,
             'comm_GSHP-heat 2003 installed base'),
            (2, 2, 4, 1, 1, 0.0, 3.5, 545.83, 3.13, 25, 2003, 2052,
             'comm_GSHP-heat 2012 installed base'),
            (2, 3, 4, 1, 1, 0.0, 3.6, 514.58, 3.13, 25, 2003, 2052,
             'comm_GSHP-heat 2013 typical'),
            (2, 4, 4, 1, 1, 0.0, 3.7, 530.21, 3.13, 25, 2003, 2052,
             'comm_GSHP-heat 2013 mid'),
            (2, 5, 4, 1, 1, 0.0, 4.0, 571.88, 3.13, 25, 2003, 2052,
             'comm_GSHP-heat 2013 high'),
            (2, 6, 4, 1, 1, 0.0, 3.8, 514.58, 3.13, 25, 2020, 2052,
             'comm_GSHP-heat 2020 typical'),
            (2, 7, 4, 1, 1, 0.0, 4.2, 571.88, 3.13, 25, 2020, 2052,
             'comm_GSHP-heat 2020 high'),
            (2, 10, 4, 1, 1, 0.0, 3.6, 514.58, 3.13, 25, 2008, 2016,
             'comm_GSHP-heat 2013 typ 10% ITC w MACRS'),
            (2, 11, 4, 1, 1, 0.0, 3.7, 530.21, 3.13, 25, 2008, 2016,
             'comm_GSHP-heat 2013 mid 10% ITC w MACRS'),
            (2, 12, 4, 1, 1, 0.0, 4.0, 571.88, 3.13, 25, 2008, 2016,
             'comm_GSHP-heat 2013 high 10% ITC w MACRS'),
            (46, 1, 4, 1, 1, 0.0809, 0.94, 16.68, 0.26, 15, 2003, 2052,
             'elec_boiler 2003 installed base'),
            (46, 2, 4, 1, 1, 0.0, 0.94, 21.13, 0.26, 15, 2012, 2052,
             'elec_boiler 2012 installed base')],
            dtype=[('t', 'i4'), ('v', 'i4'), ('r', 'i4'), ('s', 'i4'),
                   ('f', 'i4'), ('Shr', 'f8'), ('eff', 'f8'), ('c1', 'f8'),
                   ('c2', 'f8'), ('Life', 'i4'), ('y1', 'i4'), ('y2', 'i4'),
                   ('technology name', '<U50')]),
        np.array([
            (31, 1, 8, 4, 1, 0.799, 0.37, 4798.93, 32.65, 20, 2003, 2003,
             'CAV_Vent 2003 installed base'),
            (31, 2, 8, 4, 1, 0.0, 0.38, 5061.56, 34.43, 20, 2004, 2052,
             'CAV_Vent 2007 installed base'),
            (31, 3, 8, 4, 1, 0.0, 0.41, 5061.56, 34.43, 20, 2011, 2052,
             'CAV_Vent 2011 minimum'),
            (31, 4, 8, 4, 1, 0.0, 0.43, 5061.56, 34.43, 20, 2011, 2052,
             'CAV_Vent 2011 typical'),
            (31, 5, 8, 4, 1, 0.0, 0.48, 5509.18, 34.43, 20, 2011, 2052,
             'CAV_Vent 2011 high'),
            (31, 10, 8, 4, 1, 0.0, 0.51, 5061.56, 34.43, 20, 2020, 2052,
             'CAV_Vent 2020 typical'),
            (31, 11, 8, 4, 1, 0.0, 0.58, 5509.18, 34.43, 20, 2020, 2052,
             'CAV_Vent 2020 high'),
            (32, 1, 8, 4, 1, 0.201, 1.15, 6266.69, 18.94, 20, 2003, 2003,
             'VAV_Vent 20003 installed base'),
            (32, 2, 8, 4, 1, 0.0, 1.26, 6266.69, 18.94, 20, 2004, 2052,
             'VAV_Vent 2007 installed base'),
            (32, 3, 8, 4, 1, 0.0, 1.28, 6266.69, 18.94, 20, 2011, 2052,
             'VAV_Vent 2011 minimum'),
            (32, 4, 8, 4, 1, 0.0, 1.34, 6266.69, 18.94, 20, 2011, 2052,
             'VAV_Vent 2011 typical'),
            (32, 5, 8, 4, 1, 0.0, 1.5, 6886.47, 18.94, 20, 2011, 2052,
             'VAV_Vent 2011 high'),
            (32, 10, 8, 4, 1, 0.0, 1.59, 6266.69, 18.94, 20, 2020, 2052,
             'VAV_Vent 2020 typical'),
            (32, 11, 8, 4, 1, 0.0, 1.82, 6886.47, 18.94, 20, 2020, 2052,
             'VAV_Vent 2020 high')],
            dtype=[('t', 'i4'), ('v', 'i4'), ('r', 'i4'), ('s', 'i4'),
                   ('f', 'i4'), ('Shr', 'f8'), ('eff', 'f8'), ('c1', 'f8'),
                   ('c2', 'f8'), ('Life', 'i4'), ('y1', 'i4'), ('y2', 'i4'),
                   ('technology name', '<U50')]),
        np.array([
            (24, 7, 10, 6, 1, 0.0, 42.4, 84.67, 0.9, 15, 2011, 2052,
             '23W CFL 2011 typical'),
            (24, 8, 10, 6, 1, 0.0, 44.6, 78.62, 0.86, 15, 2020, 2052,
             '23W CFL 2020 typical'),
            (24, 9, 10, 6, 1, 0.0, 46.8, 73.01, 0.81, 15, 2030, 2052,
             '23W CFL 2030 typical'),
            (24, 15, 10, 6, 1, 0.129, 13.5, 81.89, 8.34, 15, 2003, 2012,
             '90W Halogen PAR-38 2003 installed base'),
            (24, 16, 10, 6, 1, 0.0, 13.5, 67.01, 7.05, 15, 2007, 2012,
             '90W Halogen PAR-38 2007 installed base'),
            (24, 17, 10, 6, 1, 0.0, 13.7, 68.02, 5.49, 15, 2011, 2052,
             '90W Halogen PAR-38 2011 typical'),
            (24, 18, 10, 6, 1, 0.0, 14.3, 64.17, 5.21, 15, 2020, 2052,
             '90W Halogen PAR-38 2020 typical'),
            (24, 20, 10, 6, 1, 0.0, 16.7, 86.3, 9.1, 15, 2003, 2012,
             '70W HIR PAR-38 2003 installed base'),
            (24, 21, 10, 6, 1, 0.0, 16.7, 70.63, 7.64, 15, 2007, 2012,
             '70W HIR PAR-38 2007 installed base'),
            (24, 22, 10, 6, 1, 0.0, 18.7, 73.56, 12.04, 15, 2011, 2052,
             '70W HIR PAR-38 2011 typical'),
            (24, 23, 10, 6, 1, 0.0, 19.6, 69.32, 11.4, 15, 2020, 2052,
             '70W HIR PAR-38 2020 typical'),
            (24, 25, 10, 6, 1, 0.0, 15.1, 509.77, 27.52, 15, 2003, 2019,
             'LED Edison 2003 installed base'),
            (24, 26, 10, 6, 1, 0.0, 51.0, 296.81, 28.71, 15, 2007, 2052,
             'LED Edison 2007 installed base'),
            (24, 27, 10, 6, 1, 0.0, 60.0, 167.69, 5.69, 15, 2011, 2052,
             'LED Edison 2011 typical'),
            (24, 28, 10, 6, 1, 0.0, 170.0, 105.71, 1.04, 15, 2020, 2052,
             'LED Edison 2020 typical'),
            (24, 29, 10, 6, 1, 0.0, 202.0, 98.48, 0.72, 15, 2030, 2052,
             'LED Edison 2030 typical'),
            (25, 1, 10, 6, 1, 0.0288, 41.6, 19.77, 1.45, 15, 2003, 2005,
             'F34T12'),
            (25, 2, 10, 6, 1, 0.0864, 59.0, 31.11, 0.84, 15, 2003, 2052,
             'T8 F32 EEMag (e)'),
            (25, 9, 10, 6, 1, 0.0007, 151.1, 24.68, 1.61, 15, 2003, 2012,
             'F28T8 HE w/ OS 2011 typical'),
            (25, 10, 10, 6, 1, 0.0, 162.5, 24.08, 1.58, 15, 2020, 2029,
             'F28T8 HE w/ OS 2020 typical'),
            (25, 11, 10, 6, 1, 0.0, 165.2, 23.43, 1.54, 15, 2030, 2052,
             'F28T8 HE w/ OS 2030 typical')],
            dtype=[('t', 'i4'), ('v', 'i4'), ('r', 'i4'), ('s', 'i4'),
                   ('f', 'i4'), ('Shr', 'f8'), ('eff', 'f8'), ('c1', 'f8'),
                   ('c2', 'f8'), ('Life', 'i4'), ('y1', 'i4'), ('y2', 'i4'),
                   ('technology name', '<U50')])]

    # Define a list of numpy arrays that represent the data selected
    # from the sd_data array based on the data_to_select lists
    selected_sd_data = [
        np.array(
            [[0.239, 0.226, 0.214, 0.202, 0.190, 0.180,
              0.169, 0.160, 0.151, 0.142, 0.134, 0.127],
             [0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
              0.000, 0.000, 0.000, 0.000, 0.000, 0.000],
             [0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
              0.000, 0.000, 0.000, 0.000, 0.000, 0.000],
             [0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
              0.000, 0.000, 0.000, 0.000, 0.000, 0.000],
             [0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
              0.000, 0.000, 0.000, 0.000, 0.000, 0.000],
             [0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
              0.000, 0.000, 0.000, 0.000, 0.000, 0.000],
             [0.023, 0.031, 0.040, 0.046, 0.054, 0.059,
              0.064, 0.069, 0.066, 0.062, 0.059, 0.055],
             [0.039, 0.037, 0.035, 0.033, 0.031, 0.029,
              0.028, 0.026, 0.033, 0.039, 0.045, 0.043],
             [0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
              0.000, 0.000, 0.000, 0.000, 0.000, 0.000],
             [0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
              0.000, 0.000, 0.000, 0.000, 0.000, 0.008],
             [1.648, 1.680, 1.707, 1.722, 1.748, 1.773,
              1.799, 1.824, 1.849, 1.879, 1.904, 1.929],
             [0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
              0.000, 0.000, 0.000, 0.000, 0.000, 0.000],
             [0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
              0.000, 0.000, 0.000, 0.000, 0.000, 0.000],
             [0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
              0.000, 0.000, 0.000, 0.000, 0.000, 0.000],
             [0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
              0.000, 0.000, 0.000, 0.000, 0.000, 0.000],
             [0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
              0.000, 0.000, 0.000, 0.000, 0.000, 0.000],
             [0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
              0.000, 0.000, 0.000, 0.000, 0.000, 0.000],
             [0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
              0.000, 0.000, 0.000, 0.000, 0.000, 0.000],
             [0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
              0.000, 0.000, 0.000, 0.000, 0.000, 0.000]]),
        np.array(
            [[0.239, 0.226, 0.214, 0.202, 0.190, 0.180,
              0.169, 0.160, 0.151, 0.142, 0.134, 0.127],
             [0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
              0.000, 0.000, 0.000, 0.000, 0.000, 0.000],
             [0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
              0.000, 0.000, 0.000, 0.000, 0.000, 0.000],
             [0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
              0.000, 0.000, 0.000, 0.000, 0.000, 0.000],
             [0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
              0.000, 0.000, 0.000, 0.000, 0.000, 0.000],
             [0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
              0.000, 0.000, 0.000, 0.000, 0.000, 0.000],
             [0.023, 0.031, 0.040, 0.046, 0.054, 0.059,
              0.064, 0.069, 0.066, 0.062, 0.059, 0.055],
             [0.039, 0.037, 0.035, 0.033, 0.031, 0.029,
              0.028, 0.026, 0.033, 0.039, 0.045, 0.043],
             [0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
              0.000, 0.000, 0.000, 0.000, 0.000, 0.000],
             [0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
              0.000, 0.000, 0.000, 0.000, 0.000, 0.008],
             [1.648, 1.680, 1.707, 1.722, 1.748, 1.773,
              1.799, 1.824, 1.849, 1.879, 1.904, 1.929],
             [0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
              0.000, 0.000, 0.000, 0.000, 0.000, 0.000],
             [0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
              0.000, 0.000, 0.000, 0.000, 0.000, 0.000],
             [0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
              0.000, 0.000, 0.000, 0.000, 0.000, 0.000],
             [0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
              0.000, 0.000, 0.000, 0.000, 0.000, 0.000],
             [0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
              0.000, 0.000, 0.000, 0.000, 0.000, 0.000],
             [0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
              0.000, 0.000, 0.000, 0.000, 0.000, 0.000],
             [0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
              0.000, 0.000, 0.000, 0.000, 0.000, 0.000],
             [0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
              0.000, 0.000, 0.000, 0.000, 0.000, 0.000]]),
        np.array(
            [[0.717, 0.673, 0.631, 0.591, 0.554, 0.520,
              0.487, 0.457, 0.428, 0.402, 0.377, 0.353],
             [0.355, 0.395, 0.370, 0.347, 0.325, 0.305,
              0.286, 0.268, 0.251, 0.236, 0.221, 0.207],
             [0.000, 0.000, 0.001, 0.002, 0.003, 0.005,
              0.004, 0.004, 0.004, 0.004, 0.004, 0.003],
             [0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
              0.000, 0.000, 0.000, 0.000, 0.000, 0.000],
             [0.000, 0.000, 0.060, 0.115, 0.167, 0.225,
              0.281, 0.336, 0.391, 0.442, 0.493, 0.462],
             [0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
              0.000, 0.000, 0.000, 0.000, 0.000, 0.000],
             [0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
              0.000, 0.000, 0.000, 0.000, 0.000, 0.079],
             [0.180, 0.169, 0.159, 0.149, 0.139, 0.131,
              0.123, 0.115, 0.108, 0.101, 0.095, 0.089],
             [0.099, 0.113, 0.106, 0.099, 0.093, 0.087,
              0.082, 0.077, 0.072, 0.068, 0.063, 0.059],
             [0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
              0.000, 0.000, 0.000, 0.000, 0.000, 0.000],
             [0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
              0.000, 0.000, 0.000, 0.000, 0.000, 0.000],
             [0.000, 0.000, 0.021, 0.041, 0.059, 0.071,
              0.082, 0.093, 0.102, 0.112, 0.121, 0.113],
             [0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
              0.000, 0.000, 0.000, 0.000, 0.000, 0.000],
             [0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
              0.000, 0.000, 0.000, 0.000, 0.000, 0.016]]),
        np.array(
            [[0.000, 0.000, 0.021, 0.041, 0.058, 0.069,
              0.081, 0.092, 0.104, 0.115, 0.125, 0.116],
             [0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
              0.000, 0.000, 0.000, 0.000, 0.000, 0.034],
             [0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
              0.000, 0.000, 0.000, 0.000, 0.000, 0.000],
             [0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
              0.000, 0.000, 0.000, 0.000, 0.000, 0.000],
             [0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
              0.000, 0.000, 0.000, 0.000, 0.000, 0.000],
             [0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
              0.000, 0.000, 0.000, 0.000, 0.000, 0.000],
             [0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
              0.000, 0.000, 0.000, 0.000, 0.000, 0.000],
             [0.199, 0.173, 0.150, 0.131, 0.102, 0.091,
              0.080, 0.071, 0.063, 0.056, 0.050, 0.040],
             [0.113, 0.130, 0.102, 0.080, 0.063, 0.056,
              0.049, 0.044, 0.039, 0.034, 0.030, 0.025],
             [0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
              0.000, 0.000, 0.000, 0.000, 0.000, 0.000],
             [0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
              0.000, 0.000, 0.000, 0.000, 0.000, 0.000],
             [0.408, 0.357, 0.309, 0.268, 0.233, 0.206,
              0.183, 0.162, 0.144, 0.127, 0.113, 0.100],
             [1.427, 1.558, 1.671, 1.799, 1.661, 1.534,
              1.416, 1.307, 1.207, 1.114, 1.028, 0.949],
             [0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
              0.000, 0.000, 0.000, 0.000, 0.000, 0.284],
             [0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
              0.000, 0.000, 0.000, 0.000, 0.000, 0.000],
             [0.048, 0.030, 0.018, 0.011, 0.007, 0.004,
              0.003, 0.002, 0.001, 0.001, 0.000, 0.000],
             [0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
              0.000, 0.000, 0.000, 0.000, 0.000, 0.000],
             [0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
              0.000, 0.000, 0.000, 0.000, 0.000, 0.000],
             [0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
              0.000, 0.000, 0.000, 0.000, 0.000, 0.000],
             [0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
              0.000, 0.000, 0.000, 0.000, 0.000, 0.089],
             [0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
              0.000, 0.000, 0.000, 0.000, 0.000, 0.000],
             [0.075, 0.066, 0.057, 0.049, 0.043, 0.038,
              0.034, 0.030, 0.026, 0.024, 0.021, 0.019]])]

    # Define a list of lists that represent the names of the
    # technology and performance levels extracted from the sd_data
    # array and corresponding to the rows of the numpy arrays in
    # selected_sd_data, the other anticipated output from the same function
    selected_sd_names = [
        ['comm_GSHP-heat 2003 installed base',
         'comm_GSHP-heat 2012 installed base', 'comm_GSHP-heat 2013 high',
         'comm_GSHP-heat 2013 high 10% ITC w MACRS', 'comm_GSHP-heat 2013 mid',
         'comm_GSHP-heat 2013 mid 10% ITC w MACRS',
         'comm_GSHP-heat 2013 typ 10% ITC w MACRS',
         'comm_GSHP-heat 2013 typical', 'comm_GSHP-heat 2020 high',
         'comm_GSHP-heat 2020 typical', 'elec_boiler 2003 installed base',
         'elec_boiler 2012 installed base',
         'rooftop_ASHP-heat 2003 installed base',
         'rooftop_ASHP-heat 2012 installed base',
         'rooftop_ASHP-heat 2013 ENERGY STAR',
         'rooftop_ASHP-heat 2013 current standard/ typ',
         'rooftop_ASHP-heat 2013 high', 'rooftop_ASHP-heat 2020 high',
         'rooftop_ASHP-heat 2020 typical'],
        ['comm_GSHP-heat 2003 installed base',
         'comm_GSHP-heat 2012 installed base', 'comm_GSHP-heat 2013 high',
         'comm_GSHP-heat 2013 high 10% ITC w MACRS', 'comm_GSHP-heat 2013 mid',
         'comm_GSHP-heat 2013 mid 10% ITC w MACRS',
         'comm_GSHP-heat 2013 typ 10% ITC w MACRS',
         'comm_GSHP-heat 2013 typical', 'comm_GSHP-heat 2020 high',
         'comm_GSHP-heat 2020 typical', 'elec_boiler 2003 installed base',
         'elec_boiler 2012 installed base',
         'rooftop_ASHP-heat 2003 installed base',
         'rooftop_ASHP-heat 2012 installed base',
         'rooftop_ASHP-heat 2013 ENERGY STAR',
         'rooftop_ASHP-heat 2013 current standard/ typ',
         'rooftop_ASHP-heat 2013 high', 'rooftop_ASHP-heat 2020 high',
         'rooftop_ASHP-heat 2020 typical'],
        ['CAV_Vent 2003 installed base', 'CAV_Vent 2007 installed base',
         'CAV_Vent 2011 high', 'CAV_Vent 2011 minimum',
         'CAV_Vent 2011 typical', 'CAV_Vent 2020 high',
         'CAV_Vent 2020 typical', 'VAV_Vent 20003 installed base',
         'VAV_Vent 2007 installed base', 'VAV_Vent 2011 high',
         'VAV_Vent 2011 minimum', 'VAV_Vent 2011 typical',
         'VAV_Vent 2020 high', 'VAV_Vent 2020 typical'],
        ['23W CFL 2011 typical', '23W CFL 2020 typical',
         '23W CFL 2030 typical', '70W HIR PAR-38 2003 installed base',
         '70W HIR PAR-38 2007 installed base', '70W HIR PAR-38 2011 typical',
         '70W HIR PAR-38 2020 typical',
         '90W Halogen PAR-38 2003 installed base',
         '90W Halogen PAR-38 2007 installed base',
         '90W Halogen PAR-38 2011 typical', '90W Halogen PAR-38 2020 typical',
         'F28T8 HE 2011 typical', 'F28T8 HE w/ OS 2011 typical',
         'F28T8 HE w/ OS 2020 typical', 'F28T8 HE w/ OS 2030 typical',
         'F34T12', 'LED Edison 2003 installed base',
         'LED Edison 2007 installed base', 'LED Edison 2011 typical',
         'LED Edison 2020 typical', 'LED Edison 2030 typical',
         'T8 F32 EEMag (e)']]

    # Define a list of years for which the data should be output
    tmp_yrs = list(range(2009, 2021))  # 2009 - 2020

    # Define a list of names of specific technologies to have their
    # cost, performance, and lifetime data converted into the desired
    # form for the output JSON database
    tmp_names = ['comm_GSHP-heat', 'rooftop_ASHP-heat',
                 'VAV_Vent', 'F28T8 HE w/ OS']

    # Set up a list of numpy arrays containing the cost, performance,
    # and lifetime data for the specific technologies in tmp_names
    reduced_tech_data = [
        np.array([
            (2, 1, 4, 1, 1, 0.0173, 3.4, 545.83, 3.13, 25, 2003, 2052,
             'comm_GSHP-heat 2003 installed base'),
            (2, 2, 4, 1, 1, 0.0, 3.5, 545.83, 3.13, 25, 2003, 2052,
             'comm_GSHP-heat 2012 installed base'),
            (2, 3, 4, 1, 1, 0.0, 3.6, 514.58, 3.13, 25, 2003, 2052,
             'comm_GSHP-heat 2013 typical'),
            (2, 4, 4, 1, 1, 0.0, 3.7, 530.21, 3.13, 25, 2003, 2052,
             'comm_GSHP-heat 2013 mid'),
            (2, 5, 4, 1, 1, 0.0, 4.0, 571.88, 3.13, 25, 2003, 2052,
             'comm_GSHP-heat 2013 high'),
            (2, 6, 4, 1, 1, 0.0, 3.8, 514.58, 3.13, 25, 2020, 2052,
             'comm_GSHP-heat 2020 typical'),
            (2, 7, 4, 1, 1, 0.0, 4.2, 571.88, 3.13, 25, 2020, 2052,
             'comm_GSHP-heat 2020 high'),
            (2, 10, 4, 1, 1, 0.0, 3.6, 514.58, 3.13, 25, 2008, 2016,
             'comm_GSHP-heat 2013 typ 10% ITC w MACRS'),
            (2, 11, 4, 1, 1, 0.0, 3.7, 530.21, 3.13, 25, 2008, 2016,
             'comm_GSHP-heat 2013 mid 10% ITC w MACRS'),
            (2, 12, 4, 1, 1, 0.0, 4.0, 571.88, 3.13, 25, 2008, 2016,
             'comm_GSHP-heat 2013 high 10% ITC w MACRS')],
            dtype=[('t', 'i4'), ('v', 'i4'), ('r', 'i4'), ('s', 'i4'),
                   ('f', 'i4'), ('Shr', 'f8'), ('eff', 'f8'), ('c1', 'f8'),
                   ('c2', 'f8'), ('Life', 'i4'), ('y1', 'i4'), ('y2', 'i4'),
                   ('technology name', '<U50')]),
        np.array([
            (1, 1, 4, 1, 1, 0.015, 3.1, 67.78, 1.47, 15, 2003, 2009,
             'rooftop_ASHP-heat 2003 installed base'),
            (1, 2, 4, 1, 1, 0.0, 3.25, 81.39, 1.47, 15, 2003, 2009,
             'rooftop_ASHP-heat 2012 installed base'),
            (1, 3, 4, 1, 1, 0.0, 3.3, 81.39, 1.47, 15, 2003, 2052,
             'rooftop_ASHP-heat 2013 current standard/ typical'),
            (1, 4, 4, 1, 1, 0.0, 3.35, 83.61, 1.47, 15, 2003, 2052,
             'rooftop_ASHP-heat 2013 ENERGY STAR'),
            (1, 5, 4, 1, 1, 0.0, 3.4, 102.78, 1.47, 15, 2003, 2052,
             'rooftop_ASHP-heat 2013 high'),
            (1, 6, 4, 1, 1, 0.0, 3.3, 81.39, 1.47, 15, 2020, 2052,
             'rooftop_ASHP-heat 2020 typical'),
            (1, 7, 4, 1, 1, 0.0, 3.4, 102.78, 1.47, 15, 2020, 2052,
             'rooftop_ASHP-heat 2020 high')],
            dtype=[('t', 'i4'), ('v', 'i4'), ('r', 'i4'), ('s', 'i4'),
                   ('f', 'i4'), ('Shr', 'f8'), ('eff', 'f8'), ('c1', 'f8'),
                   ('c2', 'f8'), ('Life', 'i4'), ('y1', 'i4'), ('y2', 'i4'),
                   ('technology name', '<U50')]),
        np.array([
            (32, 1, 8, 4, 1, 0.201, 1.15, 6266.69, 18.94, 20, 2003, 2003,
             'VAV_Vent 20003 installed base'),
            (32, 2, 8, 4, 1, 0.0, 1.26, 6266.69, 18.94, 20, 2004, 2052,
             'VAV_Vent 2007 installed base'),
            (32, 3, 8, 4, 1, 0.0, 1.28, 6266.69, 18.94, 20, 2011, 2052,
             'VAV_Vent 2011 minimum'),
            (32, 4, 8, 4, 1, 0.0, 1.34, 6266.69, 18.94, 20, 2011, 2052,
             'VAV_Vent 2011 typical'),
            (32, 5, 8, 4, 1, 0.0, 1.5, 6886.47, 18.94, 20, 2011, 2052,
             'VAV_Vent 2011 high'),
            (32, 10, 8, 4, 1, 0.0, 1.59, 6266.69, 18.94, 20, 2020, 2052,
             'VAV_Vent 2020 typical'),
            (32, 11, 8, 4, 1, 0.0, 1.82, 6886.47, 18.94, 20, 2020, 2052,
             'VAV_Vent 2020 high')],
            dtype=[('t', 'i4'), ('v', 'i4'), ('r', 'i4'), ('s', 'i4'),
                   ('f', 'i4'), ('Shr', 'f8'), ('eff', 'f8'), ('c1', 'f8'),
                   ('c2', 'f8'), ('Life', 'i4'), ('y1', 'i4'), ('y2', 'i4'),
                   ('technology name', '<U50')]),
        np.array([
            (25, 9, 10, 6, 1, 0.0007, 151.1, 24.68, 1.61, 15, 2003, 2012,
             'F28T8 HE w/ OS 2011 typical'),
            (25, 10, 10, 6, 1, 0.0, 162.5, 24.08, 1.58, 15, 2020, 2029,
             'F28T8 HE w/ OS 2020 typical'),
            (25, 11, 10, 6, 1, 0.0, 165.2, 23.43, 1.54, 15, 2030, 2052,
             'F28T8 HE w/ OS 2030 typical')],
            dtype=[('t', 'i4'), ('v', 'i4'), ('r', 'i4'), ('s', 'i4'),
                   ('f', 'i4'), ('Shr', 'f8'), ('eff', 'f8'), ('c1', 'f8'),
                   ('c2', 'f8'), ('Life', 'i4'), ('y1', 'i4'), ('y2', 'i4'),
                   ('technology name', '<U50')])]

    # Define a list of the dicts of capital cost data to be generated
    # for output to a JSON database
    result_cost = [
        {'typical':
            {'2009': 539.393, '2010': 538.602, '2011': 537.720,
             '2012': 537.044, '2013': 536.171, '2014': 535.569,
             '2015': 534.815, '2016': 534.188, '2017': 533.455,
             '2018': 532.841, '2019': 532.175, '2020': 531.613},
         'best':
            {'2009': 571.88, '2010': 571.88, '2011': 571.88,
             '2012': 571.88, '2013': 571.88, '2014': 571.88,
             '2015': 571.88, '2016': 571.88, '2017': 571.88,
             '2018': 571.88, '2019': 571.88, '2020': 571.88}},
        {'typical':
            {'2009': 0.0, '2010': 0.0, '2011': 0.0,
             '2012': 0.0, '2013': 0.0, '2014': 0.0,
             '2015': 0.0, '2016': 0.0, '2017': 0.0,
             '2018': 0.0, '2019': 0.0, '2020': 0.0},
         'best':
            {'2009': 102.78, '2010': 102.78, '2011': 102.78,
             '2012': 102.78, '2013': 102.78, '2014': 102.78,
             '2015': 102.78, '2016': 102.78, '2017': 102.78,
             '2018': 102.78, '2019': 102.78, '2020': 102.78}},
        {'typical':
            {'2009': 6266.69, '2010': 6266.69, '2011': 6266.69,
             '2012': 6266.69, '2013': 6266.69, '2014': 6266.69,
             '2015': 6266.69, '2016': 6266.69, '2017': 6266.69,
             '2018': 6266.69, '2019': 6266.69, '2020': 6266.69},
         'best':
            {'2009': 6266.69, '2010': 6266.69, '2011': 6886.47,
             '2012': 6886.47, '2013': 6886.47, '2014': 6886.47,
             '2015': 6886.47, '2016': 6886.47, '2017': 6886.47,
             '2018': 6886.47, '2019': 6886.47, '2020': 6886.47}},
        {'typical':
            {'2009': 24.68, '2010': 24.68, '2011': 24.68,
             '2012': 24.68, '2013': 24.68, '2014': 24.68,
             '2015': 24.68, '2016': 24.68, '2017': 24.68,
             '2018': 24.68, '2019': 24.68, '2020': 24.542},
         'best':
            {'2009': 24.68, '2010': 24.68, '2011': 24.68,
             '2012': 24.68, '2013': 24.68, '2014': 24.68,
             '2015': 24.68, '2016': 24.68, '2017': 24.68,
             '2018': 24.68, '2019': 24.68, '2020': 24.542}}]

    # Define a list of the dicts of performance levels for each
    # technology in the desired form to be output to a JSON database
    result_perf = [
        {'typical':
            {'2009': 3.4411, '2010': 3.4462, '2011': 3.4519,
             '2012': 3.4562, '2013': 3.4618, '2014': 3.4656,
             '2015': 3.4704, '2016': 3.4745, '2017': 3.4792,
             '2018': 3.4831, '2019': 3.4873, '2020': 3.4978},
         'best':
            {'2009': 4.0, '2010': 4.0, '2011': 4.0,
             '2012': 4.0, '2013': 4.0, '2014': 4.0,
             '2015': 4.0, '2016': 4.0, '2017': 4.0,
             '2018': 4.0, '2019': 4.0, '2020': 4.2}},
        {'typical':
            {'2009': 0.0, '2010': 0.0, '2011': 0.0,
             '2012': 0.0, '2013': 0.0, '2014': 0.0,
             '2015': 0.0, '2016': 0.0, '2017': 0.0,
             '2018': 0.0, '2019': 0.0, '2020': 0.0},
         'best':
            {'2009': 3.4, '2010': 3.4, '2011': 3.4,
             '2012': 3.4, '2013': 3.4, '2014': 3.4,
             '2015': 3.4, '2016': 3.4, '2017': 3.4,
             '2018': 3.4, '2019': 3.4, '2020': 3.4}},
        {'typical':
            {'2009': 1.1890, '2010': 1.1940, '2011': 1.2047,
             '2012': 1.2146, '2013': 1.2236, '2014': 1.2297,
             '2015': 1.2357, '2016': 1.2417, '2017': 1.2468,
             '2018': 1.2523, '2019': 1.2572, '2020': 1.2763},
         'best':
            {'2009': 1.26, '2010': 1.26, '2011': 1.5,
             '2012': 1.5, '2013': 1.5, '2014': 1.5,
             '2015': 1.5, '2016': 1.5, '2017': 1.5,
             '2018': 1.5, '2019': 1.5, '2020': 1.82}},
        {'typical':
            {'2009': 151.1, '2010': 151.1, '2011': 151.1,
             '2012': 151.1, '2013': 151.1, '2014': 151.1,
             '2015': 151.1, '2016': 151.1, '2017': 151.1,
             '2018': 151.1, '2019': 151.1, '2020': 153.726},
         'best':
            {'2009': 151.1, '2010': 151.1, '2011': 151.1,
             '2012': 151.1, '2013': 151.1, '2014': 151.1,
             '2015': 151.1, '2016': 151.1, '2017': 151.1,
             '2018': 151.1, '2019': 151.1, '2020': 162.5}}]

    # Define a list of dicts with the mean and range of equipment
    # lifetimes (in years) for each of the technologies tested
    result_life = [
        {'average':
            {'2009': 25, '2010': 25, '2011': 25,
             '2012': 25, '2013': 25, '2014': 25,
             '2015': 25, '2016': 25, '2017': 25,
             '2018': 25, '2019': 25, '2020': 25},
         'range':
            {'2009': 0, '2010': 0, '2011': 0,
             '2012': 0, '2013': 0, '2014': 0,
             '2015': 0, '2016': 0, '2017': 0,
             '2018': 0, '2019': 0, '2020': 0}},
        {'average':
            {'2009': 15, '2010': 15, '2011': 15,
             '2012': 15, '2013': 15, '2014': 15,
             '2015': 15, '2016': 15, '2017': 15,
             '2018': 15, '2019': 15, '2020': 15},
         'range':
            {'2009': 0, '2010': 0, '2011': 0,
             '2012': 0, '2013': 0, '2014': 0,
             '2015': 0, '2016': 0, '2017': 0,
             '2018': 0, '2019': 0, '2020': 0}},
        {'average':
            {'2009': 20, '2010': 20, '2011': 20,
             '2012': 20, '2013': 20, '2014': 20,
             '2015': 20, '2016': 20, '2017': 20,
             '2018': 20, '2019': 20, '2020': 20},
         'range':
            {'2009': 0, '2010': 0, '2011': 0,
             '2012': 0, '2013': 0, '2014': 0,
             '2015': 0, '2016': 0, '2017': 0,
             '2018': 0, '2019': 0, '2020': 0}},
        {'average':
            {'2009': 15, '2010': 15, '2011': 15,
             '2012': 15, '2013': 15, '2014': 15,
             '2015': 15, '2016': 15, '2017': 15,
             '2018': 15, '2019': 15, '2020': 15},
         'range':
            {'2009': 0, '2010': 0, '2011': 0,
             '2012': 0, '2013': 0, '2014': 0,
             '2015': 0, '2016': 0, '2017': 0,
             '2018': 0, '2019': 0, '2020': 0}}]

    # Define lists of technology names for each of the microsegments tested
    tech_names = [
        ['comm_GSHP-heat', 'elec_boiler', 'rooftop_ASHP-heat'],
        ['comm_GSHP-heat', 'elec_boiler', 'rooftop_ASHP-heat'],
        ['CAV_Vent', 'VAV_Vent'],
        ['23W CFL', '70W HIR PAR-38', '90W Halogen PAR-38',
         'F28T8 HE w/ OS', 'F34T12', 'LED Edison', 'T8 F32 EEMag (e)']]

    # Create a function for checking equality of a dict with point values
    def dict_check(self, dict1, dict2):
        for (k, i), (k2, i2) in zip(sorted(dict1.items()),
                                    sorted(dict2.items())):
            if isinstance(i, dict):
                self.assertCountEqual(i, i2)
                self.dict_check(i, i2)
            else:
                self.assertAlmostEqual(dict1[k], dict2[k2], places=2)


class EngineeringUnitsIdentificationTest(CommonUnitTest):
    """ Test the function that returns a text string for the units of
    technologies based on the end use number and a text string
    specifying whether cost or performance units are needed """

    def test_indicated_cost_units(self):
        for idx, selected in enumerate(self.data_to_select):
            self.assertEqual(cmt.units_id(selected, 'cost'),
                             self.cost_units[idx])

    def test_indicated_performance_units(self):
        for idx, selected in enumerate(self.data_to_select):
            self.assertEqual(cmt.units_id(selected, 'performance'),
                             self.perf_units[idx])


class TechnologyDataSelectionTest(CommonUnitTest):
    """ Test the function that selects from the technology data array
    only the rows of data for a specified microsegment """

    # Test that the correct data are returned
    def test_selection_from_technology_data(self):
        for idx, sel in enumerate(self.data_to_select):
            self.assertCountEqual(cmt.tech_data_selector(self.tech_data, sel),
                                  self.selected_tech_data[idx])


class ServiceDemandDataSelectionTest(CommonUnitTest):
    """ Test the function that selects data from the service demand
    array based on a specified microsegment """

    # Set up function under test and save outputs
    @classmethod  # (so that set up is run once for the entire class)
    def setUpClass(self):
        # Initialize variables for outputs from function under test
        self.test_sd_data = []
        self.test_sd_data_names = []

        # Call function and store outputs in the initialized variables
        for sel in self.data_to_select:
            (a, b) = cmt.sd_data_selector(self.sd_data, sel, self.tmp_yrs)
            self.test_sd_data.append(a)
            self.test_sd_data_names.append(b)

    # Test whether the arrays extracted from the service demand
    # data are consistent with the expected output, allowing for
    # floating point error differences between the arrays
    def test_data_subset_from_service_demand_data(self):
        for idx, data_subset in enumerate(self.test_sd_data):
            np.testing.assert_allclose(data_subset, self.selected_sd_data[idx])

    # Check that list of names output by the function under
    # test includes all the entries expected
    def test_technology_names_subset_from_service_demand_data(self):
        for idx, names_subset in enumerate(self.test_sd_data_names):
            self.assertEqual(names_subset, self.selected_sd_names[idx])


class SingleTechnologySelectionTest(CommonUnitTest):
    """ Test the function that selects the data for a single technology
    from the larger numpy array that includes multiple technologies
    based on a specific technology name provided """

    def test_selection_of_single_technology(self):
        for idx, tech_array in enumerate(self.selected_tech_data):
            self.assertCountEqual(
                cmt.single_tech_selector(tech_array, self.tmp_names[idx]),
                self.reduced_tech_data[idx])


class CostAndPerformanceDataExtractionTest(CommonUnitTest):
    """ Test the function that extracts the cost or performance
    data from the source data array specific to a single technology
    and converts them into the desired form to be output to the
    cost/performance/lifetime JSON """

    # Test equality of the dicts of cost data generated for each technology
    def test_cost_selection_and_conversion(self):
        for idx, input_array in enumerate(self.reduced_tech_data):
            self.dict_check(
                cmt.cost_perf_extractor(input_array,
                                        self.selected_sd_data[idx],
                                        self.selected_sd_names[idx],
                                        self.tmp_yrs,
                                        'cost'),
                self.result_cost[idx])

    # Test equality of the dicts of performance (i.e., energy efficiency)
    # data generated for each technology
    def test_performance_selection_and_conversion(self):
        for idx, input_array in enumerate(self.reduced_tech_data):
            self.dict_check(
                cmt.cost_perf_extractor(input_array,
                                        self.selected_sd_data[idx],
                                        self.selected_sd_names[idx],
                                        self.tmp_yrs,
                                        'performance'),
                self.result_perf[idx])


class LifetimeDataExtractionTest(CommonUnitTest):
    """ Test the function that extracts the technology lifetime data
    from a data array for a single technology and converts them into the
    desired form to be output to the cost/performance/lifetime JSON """

    # Test equality of the dicts of lifetime data generated for
    # each technology
    def test_lifetime_selection_and_conversion(self):
        for idx, input_array in enumerate(self.reduced_tech_data):
            self.dict_check(cmt.life_extractor(input_array,
                                               self.tmp_yrs),
                            self.result_life[idx])


class ChoiceModelParametersExtractionTest(CommonUnitTest):
    """ docstring """
    pass


# Offer external code execution (include all lines below this point in all
# test files)
def main():
    # Triggers default behavior of running all test fixtures in the file
    unittest.main()

if __name__ == '__main__':
    main()
